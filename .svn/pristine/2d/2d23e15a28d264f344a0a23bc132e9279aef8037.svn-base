<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (11.0.16) on Wed Feb 01 19:32:33 CET 2023 -->
<title>GLBase (JOGL API -- 2.4 Specification)</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="dc.created" content="2023-02-01">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="../../../jquery/jquery-ui.css" title="Style">
<script type="text/javascript" src="../../../script.js"></script>
<script type="text/javascript" src="../../../jquery/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="../../../jquery/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="../../../jquery/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="../../../jquery/jquery-3.5.1.js"></script>
<script type="text/javascript" src="../../../jquery/jquery-ui.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="GLBase (JOGL API -- 2.4 Specification)";
        }
    }
    catch(err) {
    }
//-->
var data = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6,"i26":6,"i27":6,"i28":6,"i29":6,"i30":6,"i31":6,"i32":6,"i33":6,"i34":6,"i35":6,"i36":6,"i37":6,"i38":6,"i39":6,"i40":6,"i41":6,"i42":6,"i43":6,"i44":6,"i45":6,"i46":6,"i47":6,"i48":6,"i49":6,"i50":6,"i51":6,"i52":6,"i53":6,"i54":6,"i55":6,"i56":6,"i57":6,"i58":6,"i59":6,"i60":6,"i61":6,"i62":6,"i63":6,"i64":6,"i65":6};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
var pathtoroot = "../../../";
var useModuleDirectories = true;
loadScripts(document, 'script');</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<header role="banner">
<nav role="navigation">
<div class="fixedNav">
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a id="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-all.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../index.html?com/jogamp/opengl/GLBase.html" target="_top">Frames</a></li>
<li><a href="GLBase.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<ul class="navListSearch">
<li><label for="search">SEARCH:</label>
<input type="text" id="search" value="search" disabled="disabled">
<input type="reset" id="reset" value="reset" disabled="disabled">
</li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
</div>
<div class="navPadding">&nbsp;</div>
<script type="text/javascript"><!--
$('.navPadding').css('padding-top', $('.fixedNav').css("height"));
//-->
</script>
</nav>
</header>
<!-- ======== START OF CLASS DATA ======== -->
<main role="main">
<div class="header">
<div class="subTitle"><span class="packageLabelInType">Package</span>&nbsp;<a href="package-summary.html">com.jogamp.opengl</a></div>
<h2 title="Interface GLBase" class="title">Interface GLBase</h2>
</div>
<div class="contentContainer">
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Known Subinterfaces:</dt>
<dd><code><a href="GL.html" title="interface in com.jogamp.opengl">GL</a></code>, <code><a href="GL2.html" title="interface in com.jogamp.opengl">GL2</a></code>, <code><a href="GL2ES1.html" title="interface in com.jogamp.opengl">GL2ES1</a></code>, <code><a href="GL2ES2.html" title="interface in com.jogamp.opengl">GL2ES2</a></code>, <code><a href="GL2ES3.html" title="interface in com.jogamp.opengl">GL2ES3</a></code>, <code><a href="GL2GL3.html" title="interface in com.jogamp.opengl">GL2GL3</a></code>, <code><a href="GL3.html" title="interface in com.jogamp.opengl">GL3</a></code>, <code><a href="GL3bc.html" title="interface in com.jogamp.opengl">GL3bc</a></code>, <code><a href="GL3ES3.html" title="interface in com.jogamp.opengl">GL3ES3</a></code>, <code><a href="GL4.html" title="interface in com.jogamp.opengl">GL4</a></code>, <code><a href="GL4bc.html" title="interface in com.jogamp.opengl">GL4bc</a></code>, <code><a href="GL4ES3.html" title="interface in com.jogamp.opengl">GL4ES3</a></code>, <code><a href="GLES1.html" title="interface in com.jogamp.opengl">GLES1</a></code>, <code><a href="GLES2.html" title="interface in com.jogamp.opengl">GLES2</a></code>, <code><a href="GLES3.html" title="interface in com.jogamp.opengl">GLES3</a></code></dd>
</dl>
<dl>
<dt>All Known Implementing Classes:</dt>
<dd><code><a href="DebugGL2.html" title="class in com.jogamp.opengl">DebugGL2</a></code>, <code><a href="DebugGL3.html" title="class in com.jogamp.opengl">DebugGL3</a></code>, <code><a href="DebugGL3bc.html" title="class in com.jogamp.opengl">DebugGL3bc</a></code>, <code><a href="DebugGL4.html" title="class in com.jogamp.opengl">DebugGL4</a></code>, <code><a href="DebugGL4bc.html" title="class in com.jogamp.opengl">DebugGL4bc</a></code>, <code><a href="DebugGLES1.html" title="class in com.jogamp.opengl">DebugGLES1</a></code>, <code><a href="DebugGLES2.html" title="class in com.jogamp.opengl">DebugGLES2</a></code>, <code><a href="DebugGLES3.html" title="class in com.jogamp.opengl">DebugGLES3</a></code>, <code><a href="TraceGL2.html" title="class in com.jogamp.opengl">TraceGL2</a></code>, <code><a href="TraceGL3.html" title="class in com.jogamp.opengl">TraceGL3</a></code>, <code><a href="TraceGL3bc.html" title="class in com.jogamp.opengl">TraceGL3bc</a></code>, <code><a href="TraceGL4.html" title="class in com.jogamp.opengl">TraceGL4</a></code>, <code><a href="TraceGL4bc.html" title="class in com.jogamp.opengl">TraceGL4bc</a></code>, <code><a href="TraceGLES1.html" title="class in com.jogamp.opengl">TraceGLES1</a></code>, <code><a href="TraceGLES2.html" title="class in com.jogamp.opengl">TraceGLES2</a></code>, <code><a href="TraceGLES3.html" title="class in com.jogamp.opengl">TraceGLES3</a></code></dd>
</dl>
<hr>
<pre>public interface <span class="typeNameLabel">GLBase</span></pre>
<div class="block"><P>The base interface from which all GL profiles derive, providing
 checked conversion down to concrete profiles, access to the
 OpenGL context associated with the GL and extension/function
 availability queries as described below.</P>

 <P> While the APIs for vendor extensions are unconditionally
 exposed, the underlying functions may not be present. The method
 <a href="#isFunctionAvailable(java.lang.String)"><code>isFunctionAvailable(java.lang.String)</code></a> should be used to query the
 availability of any non-core function before it is used for the
 first time; for example,
 <code>gl.isFunctionAvailable("glProgramStringARB")</code>. On
 certain platforms (Windows in particular), the most "core"
 functionality is only OpenGL 1.1, so in theory any routines first
 exposed in OpenGL 1.2, 1.3, and 1.4, 1.5, or 2.0 as well as vendor
 extensions should all be queried. Calling an unavailable function
 will cause a <a href="GLException.html" title="class in com.jogamp.opengl"><code>GLException</code></a> to be raised. </P>

 <a href="#isExtensionAvailable(java.lang.String)"><code>isExtensionAvailable(java.lang.String)</code></a> may also be used to determine whether
 a specific extension is available before calling the routines or
 using the functionality it exposes: for example,
 <code>gl.isExtensionAvailable("GL_ARB_vertex_program");</code>.
 However, in this case it is up to the end user to know which
 routines or functionality are associated with which OpenGL
 extensions. It may also be used to test for the availability of a
 particular version of OpenGL: for example,
 <code>gl.isExtensionAvailable("GL_VERSION_1_5");</code>.

 <P> Exceptions to the window system extension naming rules:

 <UL>

 <LI> WGL_ARB_pbuffer, WGL_ARB_pixel_format, and other
 platform-specific pbuffer functionality; the availability of
 pbuffers can be queried on Windows, X11 and Mac OS X platforms by
 querying <a href="#isExtensionAvailable(java.lang.String)"><code>isExtensionAvailable(java.lang.String)</code></a> with an argument of
 "GL_ARB_pbuffer" or "GL_ARB_pixel_format".</LI>

 </UL> <P></div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ========== METHOD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t3" class="tableTab"><span><a href="javascript:show(4);">Abstract Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Method</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getBoundBuffer(int)">getBoundBuffer</a></span>&#8203;(int&nbsp;target)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getBoundFramebuffer(int)">getBoundFramebuffer</a></span>&#8203;(int&nbsp;target)</code></th>
<td class="colLast">
<div class="block">Return the framebuffer name bound to this context,
 see <a href="GL.html#glBindFramebuffer(int,int)"><code>GL.glBindFramebuffer(int, int)</code></a>.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code><a href="GLBufferStorage.html" title="class in com.jogamp.opengl">GLBufferStorage</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getBufferStorage(int)">getBufferStorage</a></span>&#8203;(int&nbsp;bufferName)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code><a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getContext()">getContext</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the GLContext associated which this GL object.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getDefaultDrawFramebuffer()">getDefaultDrawFramebuffer</a></span>()</code></th>
<td class="colLast">
<div class="block">Return the default draw framebuffer name.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getDefaultReadBuffer()">getDefaultReadBuffer</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the default color buffer within the current bound
 <a href="#getDefaultReadFramebuffer()"><code>getDefaultReadFramebuffer()</code></a>, i.e.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getDefaultReadFramebuffer()">getDefaultReadFramebuffer</a></span>()</code></th>
<td class="colLast">
<div class="block">Return the default read framebuffer name.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code><a href="GL.html" title="interface in com.jogamp.opengl">GL</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getDownstreamGL()">getDownstreamGL</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the downstream GL instance in case this is a wrapping pipeline, otherwise <code>null</code>.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getExtension(java.lang.String)">getExtension</a></span>&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;extensionName)</code></th>
<td class="colLast">
<div class="block">Returns an object providing access to the specified OpenGL
 extension.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code><a href="GL.html" title="interface in com.jogamp.opengl">GL</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL()">getGL</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL interface.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code><a href="GL2.html" title="interface in com.jogamp.opengl">GL2</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL2()">getGL2</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL2 interface.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code><a href="GL2ES1.html" title="interface in com.jogamp.opengl">GL2ES1</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL2ES1()">getGL2ES1</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL2ES1 interface.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code><a href="GL2ES2.html" title="interface in com.jogamp.opengl">GL2ES2</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL2ES2()">getGL2ES2</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL2ES2 interface.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code><a href="GL2ES3.html" title="interface in com.jogamp.opengl">GL2ES3</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL2ES3()">getGL2ES3</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL2ES3 interface.</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code><a href="GL2GL3.html" title="interface in com.jogamp.opengl">GL2GL3</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL2GL3()">getGL2GL3</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL2GL3 interface.</div>
</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code><a href="GL3.html" title="interface in com.jogamp.opengl">GL3</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL3()">getGL3</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL3 interface.</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code><a href="GL3bc.html" title="interface in com.jogamp.opengl">GL3bc</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL3bc()">getGL3bc</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL3bc interface.</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code><a href="GL3ES3.html" title="interface in com.jogamp.opengl">GL3ES3</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL3ES3()">getGL3ES3</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL3ES3 interface.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code><a href="GL4.html" title="interface in com.jogamp.opengl">GL4</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL4()">getGL4</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL4 interface.</div>
</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code><a href="GL4bc.html" title="interface in com.jogamp.opengl">GL4bc</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL4bc()">getGL4bc</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL4bc interface.</div>
</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code><a href="GL4ES3.html" title="interface in com.jogamp.opengl">GL4ES3</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL4ES3()">getGL4ES3</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GL4ES3 interface.</div>
</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code><a href="GLES1.html" title="interface in com.jogamp.opengl">GLES1</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGLES1()">getGLES1</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GLES1 interface.</div>
</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code><a href="GLES2.html" title="interface in com.jogamp.opengl">GLES2</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGLES2()">getGLES2</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GLES2 interface.</div>
</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code><a href="GLES3.html" title="interface in com.jogamp.opengl">GLES3</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGLES3()">getGLES3</a></span>()</code></th>
<td class="colLast">
<div class="block">Casts this object to the GLES3 interface.</div>
</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code><a href="GLProfile.html" title="class in com.jogamp.opengl">GLProfile</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGLProfile()">getGLProfile</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the GLProfile associated with this GL object.</div>
</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getMaxRenderbufferSamples()">getMaxRenderbufferSamples</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the maximum number of FBO RENDERBUFFER samples
 if <a href="#hasFullFBOSupport()"><code>full FBO is supported</code></a>, otherwise false.</div>
</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getPlatformGLExtensions()">getPlatformGLExtensions</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns an object through which platform-specific OpenGL extensions
 (EGL, GLX, WGL, etc.) may be accessed.</div>
</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code><a href="GL.html" title="interface in com.jogamp.opengl">GL</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getRootGL()">getRootGL</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the implementing root instance, considering a wrapped pipelined hierarchy, see <a href="#getDownstreamGL()"><code>getDownstreamGL()</code></a>.</div>
</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getSwapInterval()">getSwapInterval</a></span>()</code></th>
<td class="colLast">
<div class="block">Return the current swap interval.</div>
</td>
</tr>
<tr id="i29" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#glClearDepth(double)">glClearDepth</a></span>&#8203;(double&nbsp;depth)</code></th>
<td class="colLast">
<div class="block">Aliased entrypoint of <code> void <a href="http://www.opengl.org/sdk/docs/man4/xhtml/glClearDepth.xml">glClearDepth</a>(GLclampd depth); </code> and <code> void <a href="http://www.opengl.org/sdk/docs/man4/xhtml/glClearDepth.xml">glClearDepthf</a>(GLclampf depth); </code>.</div>
</td>
</tr>
<tr id="i30" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#glDepthRange(double,double)">glDepthRange</a></span>&#8203;(double&nbsp;zNear,
            double&nbsp;zFar)</code></th>
<td class="colLast">
<div class="block">Aliased entrypoint of <code> void <a href="http://www.opengl.org/sdk/docs/man4/xhtml/glDepthRange.xml">glDepthRange</a>(GLclampd depth); </code> and <code> void <a href="http://www.opengl.org/sdk/docs/man4/xhtml/glDepthRange.xml">glDepthRangef</a>(GLclampf depth); </code>.</div>
</td>
</tr>
<tr id="i31" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#hasBasicFBOSupport()">hasBasicFBOSupport</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns <code>true</code> if basic FBO support is available, otherwise <code>false</code>.</div>
</td>
</tr>
<tr id="i32" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#hasFullFBOSupport()">hasFullFBOSupport</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns <code>true</code> if full FBO support is available, otherwise <code>false</code>.</div>
</td>
</tr>
<tr id="i33" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#hasGLSL()">hasGLSL</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object supports GLSL.</div>
</td>
</tr>
<tr id="i34" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isExtensionAvailable(java.lang.String)">isExtensionAvailable</a></span>&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;glExtensionName)</code></th>
<td class="colLast">
<div class="block">Returns true if the specified OpenGL extension can be
 used successfully through this GL instance given the current host (OpenGL
 <i>client</i>) and display (OpenGL <i>server</i>) configuration.</div>
</td>
</tr>
<tr id="i35" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isFunctionAvailable(java.lang.String)">isFunctionAvailable</a></span>&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;glFunctionName)</code></th>
<td class="colLast">
<div class="block">Returns true if the specified OpenGL core- or extension-function can be
 used successfully through this GL instance given the current host (OpenGL
 <i>client</i>) and display (OpenGL <i>server</i>) configuration.</div>
</td>
</tr>
<tr id="i36" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL()">isGL</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to any of the OpenGL profiles.</div>
</td>
</tr>
<tr id="i37" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL2()">isGL2</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to the OpenGL &le; 3.0 profile.</div>
</td>
</tr>
<tr id="i38" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL2ES1()">isGL2ES1</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to a GL2ES1 compatible profile.</div>
</td>
</tr>
<tr id="i39" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL2ES2()">isGL2ES2</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to a GL2ES2 compatible profile.</div>
</td>
</tr>
<tr id="i40" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL2ES3()">isGL2ES3</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to a either a GL2GL3 or GL3ES3 compatible profile.</div>
</td>
</tr>
<tr id="i41" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL2GL3()">isGL2GL3</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to a GL2GL3 compatible profile.</div>
</td>
</tr>
<tr id="i42" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL3()">isGL3</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to the OpenGL &ge; 3.1 core profile.</div>
</td>
</tr>
<tr id="i43" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL3bc()">isGL3bc</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to the OpenGL &ge; 3.1 compatibility profile.</div>
</td>
</tr>
<tr id="i44" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL3core()">isGL3core</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object uses a GL3 core profile.</div>
</td>
</tr>
<tr id="i45" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL3ES3()">isGL3ES3</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to a GL3ES3 compatible profile.</div>
</td>
</tr>
<tr id="i46" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL4()">isGL4</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to the OpenGL &ge; 4.0 core profile.</div>
</td>
</tr>
<tr id="i47" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL4bc()">isGL4bc</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to the OpenGL &ge; 4.0 compatibility profile.</div>
</td>
</tr>
<tr id="i48" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL4core()">isGL4core</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object uses a GL4 core profile.</div>
</td>
</tr>
<tr id="i49" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGL4ES3()">isGL4ES3</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns true if this GL object conforms to a GL4ES3 compatible profile, i.e.</div>
</td>
</tr>
<tr id="i50" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGLcore()">isGLcore</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object uses a GL core profile.</div>
</td>
</tr>
<tr id="i51" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGLES()">isGLES</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to one of the OpenGL ES profiles,
 see <a href="#isGLES1()"><code>isGLES1()</code></a>, <a href="#isGLES2()"><code>isGLES2()</code></a> and <a href="#isGLES3()"><code>isGLES3()</code></a>.</div>
</td>
</tr>
<tr id="i52" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGLES1()">isGLES1</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to the OpenGL ES &ge; 1.0 profile.</div>
</td>
</tr>
<tr id="i53" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGLES2()">isGLES2</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to the OpenGL ES &ge; 2.0 profile.</div>
</td>
</tr>
<tr id="i54" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGLES2Compatible()">isGLES2Compatible</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object is compatible with the core OpenGL ES2 functionality.</div>
</td>
</tr>
<tr id="i55" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGLES3()">isGLES3</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object conforms to the OpenGL ES &ge; 3.0 profile.</div>
</td>
</tr>
<tr id="i56" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGLES31Compatible()">isGLES31Compatible</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object is compatible with the core OpenGL ES3.1 functionality.</div>
</td>
</tr>
<tr id="i57" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGLES32Compatible()">isGLES32Compatible</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object is compatible with the core OpenGL ES3.2 functionality.</div>
</td>
</tr>
<tr id="i58" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isGLES3Compatible()">isGLES3Compatible</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether this GL object is compatible with the core OpenGL ES3 functionality.</div>
</td>
</tr>
<tr id="i59" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isNPOTTextureAvailable()">isNPOTTextureAvailable</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns true if the GL context supports non power of two (NPOT) textures,
 otherwise false.</div>
</td>
</tr>
<tr id="i60" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isTextureFormatBGRA8888Available()">isTextureFormatBGRA8888Available</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i61" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVBOArrayBound()">isVBOArrayBound</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i62" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVBOElementArrayBound()">isVBOElementArrayBound</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i63" class="rowColor">
<td class="colFirst"><code><a href="GLBufferStorage.html" title="class in com.jogamp.opengl">GLBufferStorage</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#mapBuffer(int,int)">mapBuffer</a></span>&#8203;(int&nbsp;target,
         int&nbsp;access)</code></th>
<td class="colLast">
<div class="block">Returns the <a href="GLBufferStorage.html" title="class in com.jogamp.opengl"><code>GLBufferStorage</code></a> instance as mapped via OpenGL's native <a href="GL.html#glMapBuffer(int,int)"><code>glMapBuffer(..)</code></a> implementation.</div>
</td>
</tr>
<tr id="i64" class="altColor">
<td class="colFirst"><code><a href="GLBufferStorage.html" title="class in com.jogamp.opengl">GLBufferStorage</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#mapBufferRange(int,long,long,int)">mapBufferRange</a></span>&#8203;(int&nbsp;target,
              long&nbsp;offset,
              long&nbsp;length,
              int&nbsp;access)</code></th>
<td class="colLast">
<div class="block">Returns the <a href="GLBufferStorage.html" title="class in com.jogamp.opengl"><code>GLBufferStorage</code></a> instance as mapped via OpenGL's native <a href="GL.html#glMapBufferRange(int,long,long,int)"><code>glMapBufferRange(..)</code></a> implementation.</div>
</td>
</tr>
<tr id="i65" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setSwapInterval(int)">setSwapInterval</a></span>&#8203;(int&nbsp;interval)</code></th>
<td class="colLast">
<div class="block">Set the swap interval of the current context and attached <i>onscreen <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a></i>.</div>
</td>
</tr>
</table>
</li>
</ul>
</section>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ METHOD DETAIL ========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a id="isGL()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL</h4>
<pre class="methodSignature">boolean&nbsp;isGL()</pre>
<div class="block">Indicates whether this GL object conforms to any of the OpenGL profiles.</div>
</li>
</ul>
<a id="isGL4bc()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL4bc</h4>
<pre class="methodSignature">boolean&nbsp;isGL4bc()</pre>
<div class="block">Indicates whether this GL object conforms to the OpenGL &ge; 4.0 compatibility profile.
 The GL4 compatibility profile includes the GL2, GL2ES1, GL2ES2, GL3, GL3bc and GL4 profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL4bc()"><code>GLContext.isGL4bc()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL4()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL4</h4>
<pre class="methodSignature">boolean&nbsp;isGL4()</pre>
<div class="block">Indicates whether this GL object conforms to the OpenGL &ge; 4.0 core profile.
 The GL4 core profile includes the GL2ES2, and GL3 profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL4()"><code>GLContext.isGL4()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL3bc()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL3bc</h4>
<pre class="methodSignature">boolean&nbsp;isGL3bc()</pre>
<div class="block">Indicates whether this GL object conforms to the OpenGL &ge; 3.1 compatibility profile.
 The GL3 compatibility profile includes the GL2, GL2ES1, GL2ES2 and GL3 profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL3bc()"><code>GLContext.isGL3bc()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL3</h4>
<pre class="methodSignature">boolean&nbsp;isGL3()</pre>
<div class="block">Indicates whether this GL object conforms to the OpenGL &ge; 3.1 core profile.
 The GL3 core profile includes the GL2ES2 profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL3()"><code>GLContext.isGL3()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL2()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL2</h4>
<pre class="methodSignature">boolean&nbsp;isGL2()</pre>
<div class="block">Indicates whether this GL object conforms to the OpenGL &le; 3.0 profile.
 The GL2 profile includes the GL2ES1 and GL2ES2 profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL2()"><code>GLContext.isGL2()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGLES1()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGLES1</h4>
<pre class="methodSignature">boolean&nbsp;isGLES1()</pre>
<div class="block">Indicates whether this GL object conforms to the OpenGL ES &ge; 1.0 profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGLES1()"><code>GLContext.isGLES1()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGLES2()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGLES2</h4>
<pre class="methodSignature">boolean&nbsp;isGLES2()</pre>
<div class="block">Indicates whether this GL object conforms to the OpenGL ES &ge; 2.0 profile.
 <p>
 Remark: ES2 compatible desktop profiles are not included.
 To query whether core ES2 functionality is provided, use <a href="#isGLES2Compatible()"><code>isGLES2Compatible()</code></a>.
 </p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#isGLES2Compatible()"><code>isGLES2Compatible()</code></a>, 
<a href="GLContext.html#isGLES2()"><code>GLContext.isGLES2()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGLES3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGLES3</h4>
<pre class="methodSignature">boolean&nbsp;isGLES3()</pre>
<div class="block">Indicates whether this GL object conforms to the OpenGL ES &ge; 3.0 profile.
 <p>
 Remark: ES3 compatible desktop profiles are not included.
 To query whether core ES3 functionality is provided, use <a href="#isGLES3Compatible()"><code>isGLES3Compatible()</code></a>.
 </p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#isGLES3Compatible()"><code>isGLES3Compatible()</code></a>, 
<a href="GLContext.html#isGLES3()"><code>GLContext.isGLES3()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGLES()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGLES</h4>
<pre class="methodSignature">boolean&nbsp;isGLES()</pre>
<div class="block">Indicates whether this GL object conforms to one of the OpenGL ES profiles,
 see <a href="#isGLES1()"><code>isGLES1()</code></a>, <a href="#isGLES2()"><code>isGLES2()</code></a> and <a href="#isGLES3()"><code>isGLES3()</code></a>.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGLES()"><code>GLContext.isGLES()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL2ES1()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL2ES1</h4>
<pre class="methodSignature">boolean&nbsp;isGL2ES1()</pre>
<div class="block">Indicates whether this GL object conforms to a GL2ES1 compatible profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL2ES1()"><code>GLContext.isGL2ES1()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL2ES2()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL2ES2</h4>
<pre class="methodSignature">boolean&nbsp;isGL2ES2()</pre>
<div class="block">Indicates whether this GL object conforms to a GL2ES2 compatible profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL2ES2()"><code>GLContext.isGL2ES2()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL2ES3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL2ES3</h4>
<pre class="methodSignature">boolean&nbsp;isGL2ES3()</pre>
<div class="block">Indicates whether this GL object conforms to a either a GL2GL3 or GL3ES3 compatible profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL2ES3()"><code>GLContext.isGL2ES3()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL3ES3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL3ES3</h4>
<pre class="methodSignature">boolean&nbsp;isGL3ES3()</pre>
<div class="block">Indicates whether this GL object conforms to a GL3ES3 compatible profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL3ES3()"><code>GLContext.isGL3ES3()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL4ES3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL4ES3</h4>
<pre class="methodSignature">boolean&nbsp;isGL4ES3()</pre>
<div class="block">Returns true if this GL object conforms to a GL4ES3 compatible profile, i.e. if <a href="#isGLES3Compatible()"><code>isGLES3Compatible()</code></a> returns true.
 <p>Includes [ GL &ge; 4.3, GL &ge; 3.1 w/ GL_ARB_ES3_compatibility and GLES3 ]</p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL4ES3()"><code>GLContext.isGL4ES3()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL2GL3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL2GL3</h4>
<pre class="methodSignature">boolean&nbsp;isGL2GL3()</pre>
<div class="block">Indicates whether this GL object conforms to a GL2GL3 compatible profile.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL2GL3()"><code>GLContext.isGL2GL3()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL4core()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL4core</h4>
<pre class="methodSignature">boolean&nbsp;isGL4core()</pre>
<div class="block">Indicates whether this GL object uses a GL4 core profile. <p>Includes [ GL4 ].</p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL4core()"><code>GLContext.isGL4core()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGL3core()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGL3core</h4>
<pre class="methodSignature">boolean&nbsp;isGL3core()</pre>
<div class="block">Indicates whether this GL object uses a GL3 core profile. <p>Includes [ GL4, GL3 ].</p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGL3core()"><code>GLContext.isGL3core()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGLcore()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGLcore</h4>
<pre class="methodSignature">boolean&nbsp;isGLcore()</pre>
<div class="block">Indicates whether this GL object uses a GL core profile. <p>Includes [ GL4, GL3, GLES3, GL2ES2 ].</p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGLcore()"><code>GLContext.isGLcore()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGLES2Compatible()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGLES2Compatible</h4>
<pre class="methodSignature">boolean&nbsp;isGLES2Compatible()</pre>
<div class="block">Indicates whether this GL object is compatible with the core OpenGL ES2 functionality.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if this context is an ES2 context or implements
         the extension <code>GL_ARB_ES2_compatibility</code>, otherwise false</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGLES2Compatible()"><code>GLContext.isGLES2Compatible()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGLES3Compatible()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGLES3Compatible</h4>
<pre class="methodSignature">boolean&nbsp;isGLES3Compatible()</pre>
<div class="block">Indicates whether this GL object is compatible with the core OpenGL ES3 functionality.
 <p>
 Return true if the underlying context is an ES3 context or implements
 the extension <code>GL_ARB_ES3_compatibility</code>, otherwise false.
 </p>
 <p>
 Includes [ GL &ge; 4.3, GL &ge; 3.1 w/ GL_ARB_ES3_compatibility and GLES3 ]
 </p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGLES3Compatible()"><code>GLContext.isGLES3Compatible()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGLES31Compatible()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGLES31Compatible</h4>
<pre class="methodSignature">boolean&nbsp;isGLES31Compatible()</pre>
<div class="block">Indicates whether this GL object is compatible with the core OpenGL ES3.1 functionality.
 <p>
 Return true if the underlying context is an ES3 context &ge; 3.1 or implements
 the extension <code>GL_ARB_ES3_1_compatibility</code>, otherwise false.
 </p>
 <p>
 Includes [ GL &ge; 4.5, GL &ge; 3.1 w/ GL_ARB_ES3_1_compatibility and GLES3 &ge; 3.1 ]
 </p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGLES31Compatible()"><code>GLContext.isGLES31Compatible()</code></a></dd>
</dl>
</li>
</ul>
<a id="isGLES32Compatible()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isGLES32Compatible</h4>
<pre class="methodSignature">boolean&nbsp;isGLES32Compatible()</pre>
<div class="block">Indicates whether this GL object is compatible with the core OpenGL ES3.2 functionality.
 <p>
 Return true if the underlying context is an ES3 context &ge; 3.2 or implements
 the extension <code>GL_ARB_ES3_2_compatibility</code>, otherwise false.
 </p>
 <p>
 Includes [ GL &ge; 4.5, GL &ge; 3.1 w/ GL_ARB_ES3_2_compatibility and GLES3 &ge; 3.2 ]
 </p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#isGLES32Compatible()"><code>GLContext.isGLES32Compatible()</code></a></dd>
</dl>
</li>
</ul>
<a id="hasGLSL()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>hasGLSL</h4>
<pre class="methodSignature">boolean&nbsp;hasGLSL()</pre>
<div class="block">Indicates whether this GL object supports GLSL.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#hasGLSL()"><code>GLContext.hasGLSL()</code></a></dd>
</dl>
</li>
</ul>
<a id="getDownstreamGL()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDownstreamGL</h4>
<pre class="methodSignature"><a href="GL.html" title="interface in com.jogamp.opengl">GL</a>&nbsp;getDownstreamGL()
            throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Returns the downstream GL instance in case this is a wrapping pipeline, otherwise <code>null</code>.
 <p>
 See <a href="#getRootGL()"><code>getRootGL()</code></a> for retrieving the implementing root instance.
 </p></div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if the downstream instance is not null and not a GL implementation</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#getRootGL()"><code>getRootGL()</code></a></dd>
</dl>
</li>
</ul>
<a id="getRootGL()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getRootGL</h4>
<pre class="methodSignature"><a href="GL.html" title="interface in com.jogamp.opengl">GL</a>&nbsp;getRootGL()
      throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Returns the implementing root instance, considering a wrapped pipelined hierarchy, see <a href="#getDownstreamGL()"><code>getDownstreamGL()</code></a>.
 <p>
 If this instance is not a wrapping pipeline, i.e. has no downstream instance,
 this instance is returned.
 </p></div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if the root instance is not a GL implementation</dd>
</dl>
</li>
</ul>
<a id="getGL()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL</h4>
<pre class="methodSignature"><a href="GL.html" title="interface in com.jogamp.opengl">GL</a>&nbsp;getGL()
  throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL implementation</dd>
</dl>
</li>
</ul>
<a id="getGL4bc()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL4bc</h4>
<pre class="methodSignature"><a href="GL4bc.html" title="interface in com.jogamp.opengl">GL4bc</a>&nbsp;getGL4bc()
        throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL4bc interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL4bc implementation</dd>
</dl>
</li>
</ul>
<a id="getGL4()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL4</h4>
<pre class="methodSignature"><a href="GL4.html" title="interface in com.jogamp.opengl">GL4</a>&nbsp;getGL4()
    throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL4 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL4 implementation</dd>
</dl>
</li>
</ul>
<a id="getGL3bc()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL3bc</h4>
<pre class="methodSignature"><a href="GL3bc.html" title="interface in com.jogamp.opengl">GL3bc</a>&nbsp;getGL3bc()
        throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL3bc interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL3bc implementation</dd>
</dl>
</li>
</ul>
<a id="getGL3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL3</h4>
<pre class="methodSignature"><a href="GL3.html" title="interface in com.jogamp.opengl">GL3</a>&nbsp;getGL3()
    throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL3 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL3 implementation</dd>
</dl>
</li>
</ul>
<a id="getGL2()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL2</h4>
<pre class="methodSignature"><a href="GL2.html" title="interface in com.jogamp.opengl">GL2</a>&nbsp;getGL2()
    throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL2 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL2 implementation</dd>
</dl>
</li>
</ul>
<a id="getGLES1()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGLES1</h4>
<pre class="methodSignature"><a href="GLES1.html" title="interface in com.jogamp.opengl">GLES1</a>&nbsp;getGLES1()
        throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GLES1 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GLES1 implementation</dd>
</dl>
</li>
</ul>
<a id="getGLES2()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGLES2</h4>
<pre class="methodSignature"><a href="GLES2.html" title="interface in com.jogamp.opengl">GLES2</a>&nbsp;getGLES2()
        throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GLES2 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GLES2 implementation</dd>
</dl>
</li>
</ul>
<a id="getGLES3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGLES3</h4>
<pre class="methodSignature"><a href="GLES3.html" title="interface in com.jogamp.opengl">GLES3</a>&nbsp;getGLES3()
        throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GLES3 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GLES3 implementation</dd>
</dl>
</li>
</ul>
<a id="getGL2ES1()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL2ES1</h4>
<pre class="methodSignature"><a href="GL2ES1.html" title="interface in com.jogamp.opengl">GL2ES1</a>&nbsp;getGL2ES1()
          throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL2ES1 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL2ES1 implementation</dd>
</dl>
</li>
</ul>
<a id="getGL2ES2()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL2ES2</h4>
<pre class="methodSignature"><a href="GL2ES2.html" title="interface in com.jogamp.opengl">GL2ES2</a>&nbsp;getGL2ES2()
          throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL2ES2 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL2ES2 implementation</dd>
</dl>
</li>
</ul>
<a id="getGL2ES3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL2ES3</h4>
<pre class="methodSignature"><a href="GL2ES3.html" title="interface in com.jogamp.opengl">GL2ES3</a>&nbsp;getGL2ES3()
          throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL2ES3 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL2ES3 implementation</dd>
</dl>
</li>
</ul>
<a id="getGL3ES3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL3ES3</h4>
<pre class="methodSignature"><a href="GL3ES3.html" title="interface in com.jogamp.opengl">GL3ES3</a>&nbsp;getGL3ES3()
          throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL3ES3 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL3ES3 implementation</dd>
</dl>
</li>
</ul>
<a id="getGL4ES3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL4ES3</h4>
<pre class="methodSignature"><a href="GL4ES3.html" title="interface in com.jogamp.opengl">GL4ES3</a>&nbsp;getGL4ES3()
          throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL4ES3 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL4ES3 implementation</dd>
</dl>
</li>
</ul>
<a id="getGL2GL3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL2GL3</h4>
<pre class="methodSignature"><a href="GL2GL3.html" title="interface in com.jogamp.opengl">GL2GL3</a>&nbsp;getGL2GL3()
          throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Casts this object to the GL2GL3 interface.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if this object is not a GL2GL3 implementation</dd>
</dl>
</li>
</ul>
<a id="getGLProfile()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGLProfile</h4>
<pre class="methodSignature"><a href="GLProfile.html" title="class in com.jogamp.opengl">GLProfile</a>&nbsp;getGLProfile()</pre>
<div class="block">Returns the GLProfile associated with this GL object.</div>
</li>
</ul>
<a id="getContext()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getContext</h4>
<pre class="methodSignature"><a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a>&nbsp;getContext()</pre>
<div class="block">Returns the GLContext associated which this GL object.</div>
</li>
</ul>
<a id="isFunctionAvailable(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isFunctionAvailable</h4>
<pre class="methodSignature">boolean&nbsp;isFunctionAvailable&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;glFunctionName)</pre>
<div class="block">Returns true if the specified OpenGL core- or extension-function can be
 used successfully through this GL instance given the current host (OpenGL
 <i>client</i>) and display (OpenGL <i>server</i>) configuration.<P>
 By "successfully" we mean that the function is both <i>callable</i>
 on the machine running the program and <i>available</i> on the current
 display.<P>

 In order to call a function successfully, the function must be both
 <i>callable</i> on the machine running the program and <i>available</i> on
 the display device that is rendering the output (note: on non-networked,
 single-display machines these two conditions are identical; on networked and/or
 multi-display machines this becomes more complicated). These conditions are
 met if the function is either part of the core OpenGL version supported by
 both the host and display, or it is an OpenGL extension function that both
 the host and display support. <P>

 A GL function is <i>callable</i> if it is successfully linked at runtime,
 hence the GLContext must be made current at least once.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>glFunctionName</code> - the name of the OpenGL function (e.g., use
 "glBindRenderbufferEXT" or "glBindRenderbuffer" to check if <a href="GL.html#glBindRenderbuffer(int,int)"><code>GL.glBindRenderbuffer(int,int)</code></a> is available).</dd>
</dl>
</li>
</ul>
<a id="isExtensionAvailable(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isExtensionAvailable</h4>
<pre class="methodSignature">boolean&nbsp;isExtensionAvailable&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;glExtensionName)</pre>
<div class="block">Returns true if the specified OpenGL extension can be
 used successfully through this GL instance given the current host (OpenGL
 <i>client</i>) and display (OpenGL <i>server</i>) configuration.<P></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>glExtensionName</code> - the name of the OpenGL extension (e.g.,
 "GL_ARB_vertex_program").</dd>
</dl>
</li>
</ul>
<a id="hasBasicFBOSupport()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>hasBasicFBOSupport</h4>
<pre class="methodSignature">boolean&nbsp;hasBasicFBOSupport()</pre>
<div class="block">Returns <code>true</code> if basic FBO support is available, otherwise <code>false</code>.
 <p>
 Basic FBO is supported if the context is either GL-ES >= 2.0, GL >= 3.0 [core, compat] or implements the extensions
 <code>GL_ARB_ES2_compatibility</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_EXT_framebuffer_object</code> or <code>GL_OES_framebuffer_object</code>.
 </p>
 <p>
 Basic FBO support may only include one color attachment and no multisampling,
 as well as limited internal formats for renderbuffer.
 </p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#hasBasicFBOSupport()"><code>GLContext.hasBasicFBOSupport()</code></a></dd>
</dl>
</li>
</ul>
<a id="hasFullFBOSupport()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>hasFullFBOSupport</h4>
<pre class="methodSignature">boolean&nbsp;hasFullFBOSupport()</pre>
<div class="block">Returns <code>true</code> if full FBO support is available, otherwise <code>false</code>.
 <p>
 Full FBO is supported if the context is either GL >= core 3.0 [ES, core, compat] or implements the extensions
 <code>ARB_framebuffer_object</code>, or all of
 <code>EXT_framebuffer_object</code>, <code>EXT_framebuffer_multisample</code>,
 <code>EXT_framebuffer_blit</code>, <code>GL_EXT_packed_depth_stencil</code>.
 </p>
 <p>
 Full FBO support includes multiple color attachments and multisampling.
 </p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#hasFullFBOSupport()"><code>GLContext.hasFullFBOSupport()</code></a></dd>
</dl>
</li>
</ul>
<a id="getMaxRenderbufferSamples()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getMaxRenderbufferSamples</h4>
<pre class="methodSignature">int&nbsp;getMaxRenderbufferSamples()</pre>
<div class="block">Returns the maximum number of FBO RENDERBUFFER samples
 if <a href="#hasFullFBOSupport()"><code>full FBO is supported</code></a>, otherwise false.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#getMaxRenderbufferSamples()"><code>GLContext.getMaxRenderbufferSamples()</code></a></dd>
</dl>
</li>
</ul>
<a id="isNPOTTextureAvailable()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isNPOTTextureAvailable</h4>
<pre class="methodSignature">boolean&nbsp;isNPOTTextureAvailable()</pre>
<div class="block">Returns true if the GL context supports non power of two (NPOT) textures,
 otherwise false.
 <p>
 NPOT textures are supported in OpenGL >= 3, GLES2 or if the
 'GL_ARB_texture_non_power_of_two' extension is available.
 </p></div>
</li>
</ul>
<a id="isTextureFormatBGRA8888Available()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isTextureFormatBGRA8888Available</h4>
<pre class="methodSignature">boolean&nbsp;isTextureFormatBGRA8888Available()</pre>
</li>
</ul>
<a id="setSwapInterval(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setSwapInterval</h4>
<pre class="methodSignature">void&nbsp;setSwapInterval&#8203;(int&nbsp;interval)
              throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Set the swap interval of the current context and attached <i>onscreen <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a></i>.
 <p>
 <i>offscreen <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a></i> are ignored and <code>false</code> is returned.
 </p>
 <p>
 The <code>interval</code> semantics:
 <ul>
   <li><i>0</i> disables the vertical synchronization</li>
   <li><i>&ge;1</i> is the number of vertical refreshes before a swap buffer occurs</li>
   <li><i>&lt;0</i> enables <i>late swaps to occur without synchronization to the video frame</i>, a.k.a <i>EXT_swap_control_tear</i>.
              If supported, the absolute value is the minimum number of
              video frames between buffer swaps. If not supported, the absolute value is being used, see above.
   </li>
 </ul>
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>interval</code> - see above</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if the context is not current.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#setSwapInterval(int)"><code>GLContext.setSwapInterval(int)</code></a>, 
<a href="#getSwapInterval()"><code>getSwapInterval()</code></a></dd>
</dl>
</li>
</ul>
<a id="getSwapInterval()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getSwapInterval</h4>
<pre class="methodSignature">int&nbsp;getSwapInterval()</pre>
<div class="block">Return the current swap interval.
 <p>
 If the context has not been made current at all,
 the default value <code>0</code> is returned.
 </p>
 <p>
 For a valid context w/ an <o>onscreen <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a></i> the default value is <code>1</code>,
 otherwise the default value is <code>0</code>.
 </p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#getSwapInterval()"><code>GLContext.getSwapInterval()</code></a>, 
<a href="#setSwapInterval(int)"><code>setSwapInterval(int)</code></a></dd>
</dl>
</li>
</ul>
<a id="getPlatformGLExtensions()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPlatformGLExtensions</h4>
<pre class="methodSignature"><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a>&nbsp;getPlatformGLExtensions()</pre>
<div class="block">Returns an object through which platform-specific OpenGL extensions
 (EGL, GLX, WGL, etc.) may be accessed. The data type of the returned
 object and its associated capabilities are undefined. Most
 applications will never need to call this method. It is highly
 recommended that any applications which do call this method perform
 all accesses on the returned object reflectively to guard
 themselves against changes to the implementation.</div>
</li>
</ul>
<a id="getExtension(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getExtension</h4>
<pre class="methodSignature"><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a>&nbsp;getExtension&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;extensionName)</pre>
<div class="block">Returns an object providing access to the specified OpenGL
 extension. This is intended to provide a mechanism for vendors who
 wish to provide access to new OpenGL extensions without changing
 the public API of the core package. For example, a user may request
 access to extension "GL_VENDOR_foo" and receive back an object
 which implements a vendor-specified interface which can call the
 OpenGL extension functions corresponding to that extension. It is
 up to the vendor to specify both the extension name and Java API
 for accessing it, including which class or interface contains the
 functions.

 <p>
 Note: it is the intent to add new extensions as quickly as possible
 to the core GL API. Therefore it is unlikely that most vendors will
 use this extension mechanism, but it is being provided for
 completeness.
 </p></div>
</li>
</ul>
<a id="glClearDepth(double)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>glClearDepth</h4>
<pre class="methodSignature">void&nbsp;glClearDepth&#8203;(double&nbsp;depth)</pre>
<div class="block">Aliased entrypoint of <code> void <a href="http://www.opengl.org/sdk/docs/man4/xhtml/glClearDepth.xml">glClearDepth</a>(GLclampd depth); </code> and <code> void <a href="http://www.opengl.org/sdk/docs/man4/xhtml/glClearDepth.xml">glClearDepthf</a>(GLclampf depth); </code>.</div>
</li>
</ul>
<a id="glDepthRange(double,double)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>glDepthRange</h4>
<pre class="methodSignature">void&nbsp;glDepthRange&#8203;(double&nbsp;zNear,
                  double&nbsp;zFar)</pre>
<div class="block">Aliased entrypoint of <code> void <a href="http://www.opengl.org/sdk/docs/man4/xhtml/glDepthRange.xml">glDepthRange</a>(GLclampd depth); </code> and <code> void <a href="http://www.opengl.org/sdk/docs/man4/xhtml/glDepthRange.xml">glDepthRangef</a>(GLclampf depth); </code>.</div>
</li>
</ul>
<a id="getBoundBuffer(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getBoundBuffer</h4>
<pre class="methodSignature">int&nbsp;getBoundBuffer&#8203;(int&nbsp;target)</pre>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>target</code> - a GL buffer (VBO) target as used in <a href="GL.html#glBindBuffer(int,int)"><code>GL.glBindBuffer(int, int)</code></a>, ie <a href="GL.html#GL_ELEMENT_ARRAY_BUFFER"><code>GL.GL_ELEMENT_ARRAY_BUFFER</code></a>, <a href="GL.html#GL_ARRAY_BUFFER"><code>GL.GL_ARRAY_BUFFER</code></a>, ..</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the GL buffer name bound to a target via <a href="GL.html#glBindBuffer(int,int)"><code>GL.glBindBuffer(int, int)</code></a> or 0 if unbound.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#getBufferStorage(int)"><code>getBufferStorage(int)</code></a></dd>
</dl>
</li>
</ul>
<a id="getBufferStorage(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getBufferStorage</h4>
<pre class="methodSignature"><a href="GLBufferStorage.html" title="class in com.jogamp.opengl">GLBufferStorage</a>&nbsp;getBufferStorage&#8203;(int&nbsp;bufferName)</pre>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>bufferName</code> - a GL buffer name, generated with e.g. <a href="GL.html#glGenBuffers(int,int%5B%5D,int)"><code>GL.glGenBuffers(int, int[], int)</code></a> and used in <a href="GL.html#glBindBuffer(int,int)"><code>GL.glBindBuffer(int, int)</code></a>, <a href="GL.html#glBufferData(int,long,java.nio.Buffer,int)"><code>GL.glBufferData(int, long, java.nio.Buffer, int)</code></a> or <a href="GL2.html#glNamedBufferDataEXT(int,long,java.nio.Buffer,int)"><code>GL2.glNamedBufferDataEXT(int, long, java.nio.Buffer, int)</code></a>.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the size of the given GL buffer storage, see <a href="GLBufferStorage.html" title="class in com.jogamp.opengl"><code>GLBufferStorage</code></a></dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#getBoundBuffer(int)"><code>getBoundBuffer(int)</code></a></dd>
</dl>
</li>
</ul>
<a id="mapBuffer(int,int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mapBuffer</h4>
<pre class="methodSignature"><a href="GLBufferStorage.html" title="class in com.jogamp.opengl">GLBufferStorage</a>&nbsp;mapBuffer&#8203;(int&nbsp;target,
                          int&nbsp;access)
                   throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Returns the <a href="GLBufferStorage.html" title="class in com.jogamp.opengl"><code>GLBufferStorage</code></a> instance as mapped via OpenGL's native <a href="GL.html#glMapBuffer(int,int)"><code>glMapBuffer(..)</code></a> implementation.
 <p>
 Throws a <a href="GLException.html" title="class in com.jogamp.opengl"><code>GLException</code></a> if GL-function constraints are not met.
 </p>
 <p>
 <a href="GL.html#glMapBuffer(int,int)"><code>GL.glMapBuffer(int, int)</code></a> wrapper calls this method and returns <a href="GLBufferStorage.html#getMappedBuffer()"><code>GLBufferStorage.getMappedBuffer()</code></a>.
 </p>
 <p>
 A zero <a href="GLBufferStorage.html#getSize()"><code>GLBufferStorage.getSize()</code></a> will avoid a native call and returns the unmapped <a href="GLBufferStorage.html" title="class in com.jogamp.opengl"><code>GLBufferStorage</code></a>.
 </p>
 <p>
 A null native mapping result indicating an error will
 not cause a GLException but returns the unmapped <a href="GLBufferStorage.html" title="class in com.jogamp.opengl"><code>GLBufferStorage</code></a>.
 This allows the user to handle this case.
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>target</code> - denotes the buffer via it's bound target</dd>
<dd><code>access</code> - the mapping access mode</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if buffer is not bound to target</dd>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if buffer is not tracked</dd>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if buffer is already mapped</dd>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if buffer has invalid store size, i.e. less-than zero</dd>
</dl>
</li>
</ul>
<a id="mapBufferRange(int,long,long,int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mapBufferRange</h4>
<pre class="methodSignature"><a href="GLBufferStorage.html" title="class in com.jogamp.opengl">GLBufferStorage</a>&nbsp;mapBufferRange&#8203;(int&nbsp;target,
                               long&nbsp;offset,
                               long&nbsp;length,
                               int&nbsp;access)
                        throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Returns the <a href="GLBufferStorage.html" title="class in com.jogamp.opengl"><code>GLBufferStorage</code></a> instance as mapped via OpenGL's native <a href="GL.html#glMapBufferRange(int,long,long,int)"><code>glMapBufferRange(..)</code></a> implementation.
 <p>
 Throws a <a href="GLException.html" title="class in com.jogamp.opengl"><code>GLException</code></a> if GL-function constraints are not met.
 </p>
 <p>
 <a href="GL.html#glMapBufferRange(int,long,long,int)"><code>GL.glMapBufferRange(int, long, long, int)</code></a> wrapper calls this method and returns <a href="GLBufferStorage.html#getMappedBuffer()"><code>GLBufferStorage.getMappedBuffer()</code></a>.
 </p>
 <p>
 A zero <a href="GLBufferStorage.html#getSize()"><code>GLBufferStorage.getSize()</code></a> will avoid a native call and returns the unmapped <a href="GLBufferStorage.html" title="class in com.jogamp.opengl"><code>GLBufferStorage</code></a>.
 </p>
 <p>
 A null native mapping result indicating an error will
 not cause a GLException but returns the unmapped <a href="GLBufferStorage.html" title="class in com.jogamp.opengl"><code>GLBufferStorage</code></a>.
 This allows the user to handle this case.
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>target</code> - denotes the buffer via it's bound target</dd>
<dd><code>offset</code> - offset of the mapped buffer's storage</dd>
<dd><code>length</code> - length of the mapped buffer's storage</dd>
<dd><code>access</code> - the mapping access mode</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if buffer is not bound to target</dd>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if buffer is not tracked</dd>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if buffer is already mapped</dd>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if buffer has invalid store size, i.e. less-than zero</dd>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if buffer mapping range does not fit, incl. offset</dd>
</dl>
</li>
</ul>
<a id="isVBOArrayBound()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVBOArrayBound</h4>
<pre class="methodSignature">boolean&nbsp;isVBOArrayBound()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if a VBO is bound to <a href="GL.html#GL_ARRAY_BUFFER"><code>GL.GL_ARRAY_BUFFER</code></a> via <a href="GL.html#glBindBuffer(int,int)"><code>GL.glBindBuffer(int, int)</code></a>, otherwise false</dd>
</dl>
</li>
</ul>
<a id="isVBOElementArrayBound()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVBOElementArrayBound</h4>
<pre class="methodSignature">boolean&nbsp;isVBOElementArrayBound()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if a VBO is bound to <a href="GL.html#GL_ELEMENT_ARRAY_BUFFER"><code>GL.GL_ELEMENT_ARRAY_BUFFER</code></a> via <a href="GL.html#glBindBuffer(int,int)"><code>GL.glBindBuffer(int, int)</code></a>, otherwise false</dd>
</dl>
</li>
</ul>
<a id="getBoundFramebuffer(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getBoundFramebuffer</h4>
<pre class="methodSignature">int&nbsp;getBoundFramebuffer&#8203;(int&nbsp;target)</pre>
<div class="block">Return the framebuffer name bound to this context,
 see <a href="GL.html#glBindFramebuffer(int,int)"><code>GL.glBindFramebuffer(int, int)</code></a>.
 <p>
 Calls <a href="GLContext.html#getBoundFramebuffer(int)"><code>GLContext.getBoundFramebuffer(int)</code></a>.
 </p></div>
</li>
</ul>
<a id="getDefaultDrawFramebuffer()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDefaultDrawFramebuffer</h4>
<pre class="methodSignature">int&nbsp;getDefaultDrawFramebuffer()</pre>
<div class="block">Return the default draw framebuffer name.
 <p>
 May differ from it's default <code>zero</code>
 in case an framebuffer object (<a href="FBObject.html" title="class in com.jogamp.opengl"><code>FBObject</code></a>) based drawable
 is being used.
 </p>
 <p>
 Calls <a href="GLContext.html#getDefaultDrawFramebuffer()"><code>GLContext.getDefaultDrawFramebuffer()</code></a>.
 </p></div>
</li>
</ul>
<a id="getDefaultReadFramebuffer()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDefaultReadFramebuffer</h4>
<pre class="methodSignature">int&nbsp;getDefaultReadFramebuffer()</pre>
<div class="block">Return the default read framebuffer name.
 <p>
 May differ from it's default <code>zero</code>
 in case an framebuffer object (<a href="FBObject.html" title="class in com.jogamp.opengl"><code>FBObject</code></a>) based drawable
 is being used.
 </p>
 <p>
 Calls <a href="GLContext.html#getDefaultReadFramebuffer()"><code>GLContext.getDefaultReadFramebuffer()</code></a>.
 </p></div>
</li>
</ul>
<a id="getDefaultReadBuffer()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>getDefaultReadBuffer</h4>
<pre class="methodSignature">int&nbsp;getDefaultReadBuffer()</pre>
<div class="block">Returns the default color buffer within the current bound
 <a href="#getDefaultReadFramebuffer()"><code>getDefaultReadFramebuffer()</code></a>, i.e. GL_READ_FRAMEBUFFER,
 which will be used as the source for pixel reading commands,
 like <a href="GL.html#glReadPixels(int,int,int,int,int,int,java.nio.Buffer)"><code>glReadPixels</code></a> etc.
 <p>
 For offscreen framebuffer objects this is <a href="GL.html#GL_COLOR_ATTACHMENT0"><code>GL.GL_COLOR_ATTACHMENT0</code></a>,
 otherwise this is <a href="GL.html#GL_FRONT"><code>GL.GL_FRONT</code></a> for single buffer configurations
 and <a href="GL.html#GL_BACK"><code>GL.GL_BACK</code></a> for double buffer configurations.
 </p>
 <p>
 Note-1: Neither ES1 nor ES2 supports selecting the read buffer via glReadBuffer
 and <a href="GL.html#GL_BACK"><code>GL.GL_BACK</code></a> is the default.
 </p>
 <p>
 Note-2: ES3 only supports <a href="GL.html#GL_BACK"><code>GL.GL_BACK</code></a>, <a href="GL.html#GL_NONE"><code>GL.GL_NONE</code></a> or <a href="GL.html#GL_COLOR_ATTACHMENT0"><code>GL.GL_COLOR_ATTACHMENT0</code></a>+i
 </p>
 <p>
 Note-3: See <a href="util/GLDrawableUtil.html#swapBuffersBeforeRead(com.jogamp.opengl.GLCapabilitiesImmutable)"><code>swapBuffersBeforeRead</code></a>
 for read-pixels and swap-buffers implications.
 </p>
 <p>
 Calls <a href="GLContext.html#getDefaultReadBuffer()"><code>GLContext.getDefaultReadBuffer()</code></a>.
 </p></div>
</li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
</div>
</main>
<!-- ========= END OF CLASS DATA ========= -->
<footer role="contentinfo">
<nav role="navigation">
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a id="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-all.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../index.html?com/jogamp/opengl/GLBase.html" target="_top">Frames</a></li>
<li><a href="GLBase.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</nav>
<p class="legalCopy"><small>Copyright 2010 JogAmp Community.</small></p>
</footer>
</body>
</html>
