<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (11.0.16) on Wed Feb 01 19:32:33 CET 2023 -->
<title>GLAutoDrawable (JOGL API -- 2.4 Specification)</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="dc.created" content="2023-02-01">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="../../../jquery/jquery-ui.css" title="Style">
<script type="text/javascript" src="../../../script.js"></script>
<script type="text/javascript" src="../../../jquery/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="../../../jquery/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="../../../jquery/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="../../../jquery/jquery-3.5.1.js"></script>
<script type="text/javascript" src="../../../jquery/jquery-ui.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="GLAutoDrawable (JOGL API -- 2.4 Specification)";
        }
    }
    catch(err) {
    }
//-->
var data = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6,"i26":6,"i27":6,"i28":6,"i29":6,"i30":6};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
var pathtoroot = "../../../";
var useModuleDirectories = true;
loadScripts(document, 'script');</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<header role="banner">
<nav role="navigation">
<div class="fixedNav">
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a id="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-all.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../index.html?com/jogamp/opengl/GLAutoDrawable.html" target="_top">Frames</a></li>
<li><a href="GLAutoDrawable.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<ul class="navListSearch">
<li><label for="search">SEARCH:</label>
<input type="text" id="search" value="search" disabled="disabled">
<input type="reset" id="reset" value="reset" disabled="disabled">
</li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
</div>
<div class="navPadding">&nbsp;</div>
<script type="text/javascript"><!--
$('.navPadding').css('padding-top', $('.fixedNav').css("height"));
//-->
</script>
</nav>
</header>
<!-- ======== START OF CLASS DATA ======== -->
<main role="main">
<div class="header">
<div class="subTitle"><span class="packageLabelInType">Package</span>&nbsp;<a href="package-summary.html">com.jogamp.opengl</a></div>
<h2 title="Interface GLAutoDrawable" class="title">Interface GLAutoDrawable</h2>
</div>
<div class="contentContainer">
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Superinterfaces:</dt>
<dd><code><a href="GLDrawable.html" title="interface in com.jogamp.opengl">GLDrawable</a></code>, <code><a href="../../../../javadoc_nativewindow_spec/com/jogamp/nativewindow/NativeSurfaceHolder.html?is-external=true" title="class or interface in com.jogamp.nativewindow" class="externalLink">NativeSurfaceHolder</a></code></dd>
</dl>
<dl>
<dt>All Known Subinterfaces:</dt>
<dd><code><a href="awt/AWTGLAutoDrawable.html" title="interface in com.jogamp.opengl.awt">AWTGLAutoDrawable</a></code>, <code><a href="GLOffscreenAutoDrawable.html" title="interface in com.jogamp.opengl">GLOffscreenAutoDrawable</a></code>, <code><a href="GLOffscreenAutoDrawable.FBO.html" title="interface in com.jogamp.opengl">GLOffscreenAutoDrawable.FBO</a></code>, <code><a href="GLSharedContextSetter.html" title="interface in com.jogamp.opengl">GLSharedContextSetter</a></code></dd>
</dl>
<dl>
<dt>All Known Implementing Classes:</dt>
<dd><code>jogamp.opengl.GLAutoDrawableBase</code>, <code><a href="GLAutoDrawableDelegate.html" title="class in com.jogamp.opengl">GLAutoDrawableDelegate</a></code>, <code><a href="awt/GLCanvas.html" title="class in com.jogamp.opengl.awt">GLCanvas</a></code>, <code><a href="swt/GLCanvas.html" title="class in com.jogamp.opengl.swt">GLCanvas</a></code>, <code><a href="awt/GLJPanel.html" title="class in com.jogamp.opengl.awt">GLJPanel</a></code></dd>
</dl>
<hr>
<pre>public interface <span class="typeNameLabel">GLAutoDrawable</span>
extends <a href="GLDrawable.html" title="interface in com.jogamp.opengl">GLDrawable</a></pre>
<div class="block">A higher-level abstraction than <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> which supplies
    an event based mechanism (<a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>) for performing
    OpenGL rendering. A GLAutoDrawable automatically creates a primary
    rendering context which is associated with the GLAutoDrawable for
    the lifetime of the object.
    <p>
    Since the <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a> <a href="GLContext.html#makeCurrent()"><code>makeCurrent</code></a>
    implementation is synchronized, i.e. blocks if the context
    is current on another thread, the internal
    <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a> for the GLAutoDrawable can be used for the event
    based rendering mechanism and by end users directly.
    </p>
    <h5><a name="initialization">GLAutoDrawable Initialization</a></h5>
    <p>
    The implementation shall initialize itself as soon as possible,
    which is only possible <i>after</i> the attached <a href="../../../../javadoc_nativewindow_spec/com/jogamp/nativewindow/NativeSurface.html?is-external=true" title="class or interface in com.jogamp.nativewindow" class="externalLink"><code>NativeSurface</code></a> becomes visible and and is realized.<br>
    The following initialization sequence should be implemented:
    <ul>
        <li> Create the  <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> with the requested <a href="GLCapabilities.html" title="class in com.jogamp.opengl"><code>GLCapabilities</code></a></li>
        <li> Notify <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> to validate the <a href="GLCapabilities.html" title="class in com.jogamp.opengl"><code>GLCapabilities</code></a> by calling <a href="GLDrawable.html#setRealized(boolean)"><code>setRealized(true)</code></a>.</li>
        <li> Create the new <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a>.</li>
        <li> Initialize all OpenGL resources by calling <a href="GLEventListener.html#init(com.jogamp.opengl.GLAutoDrawable)"><code>init(..)</code></a> for all
             registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s. This can be done immediately, or with the followup <a href="#display()"><code>display(..)</code></a> call.</li>
        <li> Send a reshape event by calling <a href="GLEventListener.html#reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)"><code>reshape(..)</code></a> for all
             registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s. This shall be done after the <a href="GLEventListener.html#init(com.jogamp.opengl.GLAutoDrawable)"><code>init(..)</code></a> calls.</li>
    </ul>
    Note: The last to <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> actions shall be also performed, when <a href="#addGLEventListener(com.jogamp.opengl.GLEventListener)"><code>adding</code></a>
    a new one to an already initialized <a href="GLAutoDrawable.html" title="interface in com.jogamp.opengl"><code>GLAutoDrawable</code></a>.
    </p>
    <h5><a name="reconfiguration">GLAutoDrawable Reconfiguration</a></h5>
    <p>
    Another implementation detail is the <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> reconfiguration. One use case is where a window is being
    dragged to another screen with a different pixel configuration, ie <a href="GLCapabilities.html" title="class in com.jogamp.opengl"><code>GLCapabilities</code></a>. The implementation
    shall be able to detect such cases in conjunction with the associated <a href="../../../../javadoc_nativewindow_spec/com/jogamp/nativewindow/NativeSurface.html?is-external=true" title="class or interface in com.jogamp.nativewindow" class="externalLink"><code>NativeSurface</code></a>.<br/>
    For example, AWT's <a href="http://docs.oracle.com/javase/6/docs/api/java/awt/Canvas.html?is-external=true" title="class or interface in java.awt" class="externalLink"><code>Canvas</code></a> 's <a href="http://docs.oracle.com/javase/6/docs/api/java/awt/Component.html?is-external=true#getGraphicsConfiguration()" title="class or interface in java.awt" class="externalLink"><code>getGraphicsConfiguration()</code></a>
    is capable to determine a display device change. This is demonstrated within <a href="awt/GLCanvas.html" title="class in com.jogamp.opengl.awt"><code>GLCanvas</code></a>'s
    and NEWT's <code>AWTCanvas</code> <a href="awt/GLCanvas.html#getGraphicsConfiguration()"><code>getGraphicsConfiguration()</code></a>
    specialization. Another demonstration is NEWT's <a href="../../../../javadoc_nativewindow_spec/com/jogamp/nativewindow/NativeWindow.html?is-external=true" title="class or interface in com.jogamp.nativewindow" class="externalLink"><code>NativeWindow</code></a>
    implementation on the Windows platform, which utilizes the native platform's <i>MonitorFromWindow(HWND)</i> function.<br/>
    All OpenGL resources shall be regenerated, while the drawable's <a href="GLCapabilities.html" title="class in com.jogamp.opengl"><code>GLCapabilities</code></a> has
    to be chosen again. The following protocol shall be satisfied.
    <ul>
        <li> Controlled disposal:</li>
        <ul>
            <li> Dispose all OpenGL resources by calling <a href="GLEventListener.html#dispose(com.jogamp.opengl.GLAutoDrawable)"><code>dispose(..)</code></a> for all
                 registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s.</li>
            <li> Destroy the <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a>.</li>
            <li> Notify <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> of the invalid state by calling <a href="GLDrawable.html#setRealized(boolean)"><code>setRealized(false)</code></a>.</li>
        </ul>
        <li> Controlled regeneration:</li>
        <ul>
            <li> Create the new <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> with the requested <a href="GLCapabilities.html" title="class in com.jogamp.opengl"><code>GLCapabilities</code></a>
            <li> Notify <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> to revalidate the <a href="GLCapabilities.html" title="class in com.jogamp.opengl"><code>GLCapabilities</code></a> by calling <a href="GLDrawable.html#setRealized(boolean)"><code>setRealized(true)</code></a>.</li>
            <li> Create the new <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a>.</li>
            <li> Initialize all OpenGL resources by calling <a href="GLEventListener.html#init(com.jogamp.opengl.GLAutoDrawable)"><code>init(..)</code></a> for all
                 registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s. This can be done immediatly, or with the followup <a href="#display()"><code>display(..)</code></a> call.</li>
            <li> Send a reshape event by calling <a href="GLEventListener.html#reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)"><code>reshape(..)</code></a> for all
                 registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s. This shall be done after the <a href="GLEventListener.html#init(com.jogamp.opengl.GLAutoDrawable)"><code>init(..)</code></a> calls.</li>
        </ul>
    </ul>
    Note: Current graphics driver keep the surface configuration for a given window, even if the window is moved to
    a monitor with a different pixel configuration, ie 32bpp to 16bpp. However, it is best to not assume such behavior
    and make your application comply with the above protocol.
    <p>
    Avoiding breakage with older applications and because of the situation
    mentioned above, the <code>boolean</code> system property <code>jogl.screenchange.action</code> will control the
    screen change action as follows:<br/>
    <PRE>
    -Djogl.screenchange.action=false Disable the <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> reconfiguration (the default)
    -Djogl.screenchange.action=true  Enable  the <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> reconfiguration
    </PRE>
    </p>
    <h5><a name="locking">GLAutoDrawable Locking</a></h5>
    GLAutoDrawable implementations perform locking in the following order:
    <ol>
      <li> <a href="#getUpstreamLock()"><code>getUpstreamLock()</code></a>.<a href="../../../../../gluegen/javadoc/com/jogamp/common/util/locks/Lock.html?is-external=true#lock()" title="class or interface in com.jogamp.common.util.locks" class="externalLink"><code>lock()</code></a></li>
      <li> <a href="GLDrawable.html#getNativeSurface()"><code>GLDrawable.getNativeSurface()</code></a>.<a href="../../../../javadoc_nativewindow_spec/com/jogamp/nativewindow/NativeSurface.html?is-external=true#lockSurface()" title="class or interface in com.jogamp.nativewindow" class="externalLink"><code>lockSurface()</code></a> </li>
    </ol>
    and releases the locks accordingly:
    <ol>
      <li> <a href="GLDrawable.html#getNativeSurface()"><code>GLDrawable.getNativeSurface()</code></a>.<a href="../../../../javadoc_nativewindow_spec/com/jogamp/nativewindow/NativeSurface.html?is-external=true#unlockSurface()" title="class or interface in com.jogamp.nativewindow" class="externalLink"><code>unlockSurface()</code></a> </li>
      <li> <a href="#getUpstreamLock()"><code>getUpstreamLock()</code></a>.<a href="../../../../../gluegen/javadoc/com/jogamp/common/util/locks/Lock.html?is-external=true#unlock()" title="class or interface in com.jogamp.common.util.locks" class="externalLink"><code>unlock()</code></a></li>
    </ol>
    Above <i>locking order</i> is mandatory to guarantee
    atomicity of operation and to avoid race-conditions.
    A custom implementation or user applications requiring exclusive access
    shall follow the <i>locking order</i>.
    See:
    <ul>
      <li><a href="#getUpstreamLock()"><code>getUpstreamLock()</code></a></li>
      <li><a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>invoke(boolean, GLRunnable)</code></a></li>
      <li><a href="#invoke(boolean,java.util.List)"><code>invoke(boolean, List)</code></a></li>
    </ul>
    </p></div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Field</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#SCREEN_CHANGE_ACTION_ENABLED">SCREEN_CHANGE_ACTION_ENABLED</a></span></code></th>
<td class="colLast">
<div class="block">Flag reflecting whether the <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> reconfiguration will be issued in
 case a screen device change occurred, e.g.</div>
</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- ========== METHOD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t3" class="tableTab"><span><a href="javascript:show(4);">Abstract Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Method</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#addGLEventListener(int,com.jogamp.opengl.GLEventListener)">addGLEventListener</a></span>&#8203;(int&nbsp;index,
                  <a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener)</code></th>
<td class="colLast">
<div class="block">Adds the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> at the given index of this drawable queue.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#addGLEventListener(com.jogamp.opengl.GLEventListener)">addGLEventListener</a></span>&#8203;(<a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener)</code></th>
<td class="colLast">
<div class="block">Adds the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> to the end of this drawable queue.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#areAllGLEventListenerInitialized()">areAllGLEventListenerInitialized</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns true if all added <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> are initialized, otherwise false.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code><a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#createContext(com.jogamp.opengl.GLContext)">createContext</a></span>&#8203;(<a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a>&nbsp;shareWith)</code></th>
<td class="colLast">
<div class="block">Creates a new context for drawing to this drawable that will
 optionally share buffer objects, textures and other server-side OpenGL
 objects with the specified GLContext.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#destroy()">destroy</a></span>()</code></th>
<td class="colLast">
<div class="block">Destroys all resources associated with this GLAutoDrawable,
      inclusive the GLContext.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#display()">display</a></span>()</code></th>
<td class="colLast">
<div class="block">
 Causes OpenGL rendering to be performed for this GLAutoDrawable
 in the following order:
 
      Calling <a href="GLEventListener.html#display(com.jogamp.opengl.GLAutoDrawable)"><code>display(..)</code></a> for all
          registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code><a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#disposeGLEventListener(com.jogamp.opengl.GLEventListener,boolean)">disposeGLEventListener</a></span>&#8203;(<a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener,
                      boolean&nbsp;remove)</code></th>
<td class="colLast">
<div class="block">Disposes the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> via <a href="GLEventListener.html#dispose(com.jogamp.opengl.GLAutoDrawable)"><code>dispose(..)</code></a>
 if it has been initialized and added to this queue.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#flushGLRunnables()">flushGLRunnables</a></span>()</code></th>
<td class="colLast">
<div class="block">Flushes all <a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>enqueued</code></a> <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a> of this <a href="GLAutoDrawable.html" title="interface in com.jogamp.opengl"><code>GLAutoDrawable</code></a>
 including notifying waiting executor.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code><a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl">GLAnimatorControl</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getAnimator()">getAnimator</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getAutoSwapBufferMode()">getAutoSwapBufferMode</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether automatic buffer swapping is enabled for this
      drawable.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code><a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getContext()">getContext</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the context associated with this drawable.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getContextCreationFlags()">getContextCreationFlags</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code><a href="GLDrawable.html" title="interface in com.jogamp.opengl">GLDrawable</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getDelegatedDrawable()">getDelegatedDrawable</a></span>()</code></th>
<td class="colLast">
<div class="block">If the implementation uses delegation, return the delegated <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> instance,
 otherwise return <code>this</code> instance.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Thread.html?is-external=true" title="class or interface in java.lang" class="externalLink">Thread</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getExclusiveContextThread()">getExclusiveContextThread</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code><a href="GL.html" title="interface in com.jogamp.opengl">GL</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGL()">getGL</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the <a href="GL.html" title="interface in com.jogamp.opengl"><code>GL</code></a> pipeline object this GLAutoDrawable uses.</div>
</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code><a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGLEventListener(int)">getGLEventListener</a></span>&#8203;(int&nbsp;index)</code></th>
<td class="colLast">
<div class="block">Returns the <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> at the given index of this drawable queue.</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGLEventListenerCount()">getGLEventListenerCount</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the number of <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> of this drawable queue.</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getGLEventListenerInitState(com.jogamp.opengl.GLEventListener)">getGLEventListenerInitState</a></span>&#8203;(<a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener)</code></th>
<td class="colLast">
<div class="block">Retrieves whether the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> is initialized or not.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code><a href="../../../../../gluegen/javadoc/com/jogamp/common/util/locks/RecursiveLock.html?is-external=true" title="class or interface in com.jogamp.common.util.locks" class="externalLink">RecursiveLock</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getUpstreamLock()">getUpstreamLock</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the recursive lock object of the <a href="#getUpstreamWidget()"><code>upstream widget</code></a>
 to synchronize multithreaded access on top of <a href="../../../../javadoc_nativewindow_spec/com/jogamp/nativewindow/NativeSurface.html?is-external=true#lockSurface()" title="class or interface in com.jogamp.nativewindow" class="externalLink"><code>NativeSurface.lockSurface()</code></a>.</div>
</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getUpstreamWidget()">getUpstreamWidget</a></span>()</code></th>
<td class="colLast">
<div class="block">Method <i>may</i> return the upstream UI toolkit object
 holding this <a href="GLAutoDrawable.html" title="interface in com.jogamp.opengl"><code>GLAutoDrawable</code></a> instance, if exist.</div>
</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)">invoke</a></span>&#8203;(boolean&nbsp;wait,
      <a href="GLRunnable.html" title="interface in com.jogamp.opengl">GLRunnable</a>&nbsp;glRunnable)</code></th>
<td class="colLast">
<div class="block">Enqueues a one-shot <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a>,
 which will be executed within the next <a href="#display()"><code>display()</code></a> call
 after all registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s
 <a href="GLEventListener.html#display(com.jogamp.opengl.GLAutoDrawable)"><code>display(GLAutoDrawable)</code></a>
 methods have been called.</div>
</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#invoke(boolean,java.util.List)">invoke</a></span>&#8203;(boolean&nbsp;wait,
      <a href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util" class="externalLink">List</a>&lt;<a href="GLRunnable.html" title="interface in com.jogamp.opengl">GLRunnable</a>&gt;&nbsp;glRunnables)</code></th>
<td class="colLast">
<div class="block">Extends <a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>invoke(boolean, GLRunnable)</code></a> functionality
 allowing to inject a list of <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a>s.</div>
</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isThreadGLCapable()">isThreadGLCapable</a></span>()</code></th>
<td class="colLast">
<div class="block">Indicates whether the current thread is capable of
 performing OpenGL-related work.</div>
</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code><a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#removeGLEventListener(com.jogamp.opengl.GLEventListener)">removeGLEventListener</a></span>&#8203;(<a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener)</code></th>
<td class="colLast">
<div class="block">Removes the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> from this drawable queue.</div>
</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setAnimator(com.jogamp.opengl.GLAnimatorControl)">setAnimator</a></span>&#8203;(<a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl">GLAnimatorControl</a>&nbsp;animatorControl)</code></th>
<td class="colLast">
<div class="block">Registers the usage of an animator, an <a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>GLAnimatorControl</code></a> implementation.</div>
</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setAutoSwapBufferMode(boolean)">setAutoSwapBufferMode</a></span>&#8203;(boolean&nbsp;enable)</code></th>
<td class="colLast">
<div class="block">Enables or disables automatic buffer swapping for this drawable.</div>
</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code><a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setContext(com.jogamp.opengl.GLContext,boolean)">setContext</a></span>&#8203;(<a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a>&nbsp;newCtx,
          boolean&nbsp;destroyPrevCtx)</code></th>
<td class="colLast">
<div class="block">Associate the new context, <code>newtCtx</code>, to this auto-drawable.</div>
</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setContextCreationFlags(int)">setContextCreationFlags</a></span>&#8203;(int&nbsp;flags)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Thread.html?is-external=true" title="class or interface in java.lang" class="externalLink">Thread</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setExclusiveContextThread(java.lang.Thread)">setExclusiveContextThread</a></span>&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Thread.html?is-external=true" title="class or interface in java.lang" class="externalLink">Thread</a>&nbsp;t)</code></th>
<td class="colLast">
<div class="block">Dedicates this instance's <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a> to the given thread.<br/>
 The thread will exclusively claim the <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a> via <a href="#display()"><code>display()</code></a> and not release it
 until <a href="#destroy()"><code>destroy()</code></a> or <code>setExclusiveContextThread(null)</code> has been called.</div>
</td>
</tr>
<tr id="i29" class="rowColor">
<td class="colFirst"><code><a href="GL.html" title="interface in com.jogamp.opengl">GL</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setGL(com.jogamp.opengl.GL)">setGL</a></span>&#8203;(<a href="GL.html" title="interface in com.jogamp.opengl">GL</a>&nbsp;gl)</code></th>
<td class="colLast">
<div class="block">Sets the <a href="GL.html" title="interface in com.jogamp.opengl"><code>GL</code></a> pipeline object this GLAutoDrawable uses.</div>
</td>
</tr>
<tr id="i30" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setGLEventListenerInitState(com.jogamp.opengl.GLEventListener,boolean)">setGLEventListenerInitState</a></span>&#8203;(<a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener,
                           boolean&nbsp;initialized)</code></th>
<td class="colLast">
<div class="block">Sets the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener's</code></a> initialized state.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a id="methods.inherited.from.class.com.jogamp.opengl.GLDrawable">
<!--   -->
</a>
<h3>Methods inherited from interface&nbsp;com.jogamp.opengl.<a href="GLDrawable.html" title="interface in com.jogamp.opengl">GLDrawable</a></h3>
<code><a href="GLDrawable.html#getChosenGLCapabilities()">getChosenGLCapabilities</a>, <a href="GLDrawable.html#getFactory()">getFactory</a>, <a href="GLDrawable.html#getGLProfile()">getGLProfile</a>, <a href="GLDrawable.html#getHandle()">getHandle</a>, <a href="GLDrawable.html#getNativeSurface()">getNativeSurface</a>, <a href="GLDrawable.html#getRequestedGLCapabilities()">getRequestedGLCapabilities</a>, <a href="GLDrawable.html#getSurfaceHeight()">getSurfaceHeight</a>, <a href="GLDrawable.html#getSurfaceWidth()">getSurfaceWidth</a>, <a href="GLDrawable.html#isGLOriented()">isGLOriented</a>, <a href="GLDrawable.html#isRealized()">isRealized</a>, <a href="GLDrawable.html#setRealized(boolean)">setRealized</a>, <a href="GLDrawable.html#swapBuffers()">swapBuffers</a>, <a href="GLDrawable.html#toString()">toString</a></code></li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a id="SCREEN_CHANGE_ACTION_ENABLED">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>SCREEN_CHANGE_ACTION_ENABLED</h4>
<pre>static final&nbsp;boolean SCREEN_CHANGE_ACTION_ENABLED</pre>
<div class="block">Flag reflecting whether the <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> reconfiguration will be issued in
 case a screen device change occurred, e.g. in a multihead environment,
 where you drag the window to another monitor.</div>
</li>
</ul>
</li>
</ul>
</section>
<!-- ============ METHOD DETAIL ========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a id="getDelegatedDrawable()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDelegatedDrawable</h4>
<pre class="methodSignature"><a href="GLDrawable.html" title="interface in com.jogamp.opengl">GLDrawable</a>&nbsp;getDelegatedDrawable()</pre>
<div class="block">If the implementation uses delegation, return the delegated <a href="GLDrawable.html" title="interface in com.jogamp.opengl"><code>GLDrawable</code></a> instance,
 otherwise return <code>this</code> instance.</div>
</li>
</ul>
<a id="getContext()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getContext</h4>
<pre class="methodSignature"><a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a>&nbsp;getContext()</pre>
<div class="block">Returns the context associated with this drawable. The returned
 context will be synchronized.
 Don't rely on it's identity, the context may change.</div>
</li>
</ul>
<a id="setContext(com.jogamp.opengl.GLContext,boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setContext</h4>
<pre class="methodSignature"><a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a>&nbsp;setContext&#8203;(<a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a>&nbsp;newCtx,
                     boolean&nbsp;destroyPrevCtx)</pre>
<div class="block">Associate the new context, <code>newtCtx</code>, to this auto-drawable.
 <p>
 Remarks:
 <ul>
   <li>The currently associated context will be destroyed if <code>destroyPrevCtx</code> is <code>true</code>,
       otherwise it will be disassociated from this auto-drawable
       via <a href="GLContext.html#setGLDrawable(com.jogamp.opengl.GLDrawable,boolean)"><code>setGLDrawable(null, true);</code></a> including <a href="GL.html#glFinish()"><code>glFinish()</code></a>.</li>
   <li>The new context will be associated with this auto-drawable
       via <a href="GLContext.html#setGLDrawable(com.jogamp.opengl.GLDrawable,boolean)"><code>newCtx.setGLDrawable(drawable, true);</code></a>.</li>
   <li>If the old context was current on this thread, it is being released after disassociating this auto-drawable.</li>
   <li>If the new context was current on this thread, it is being released before associating this auto-drawable
       and made current afterwards.</li>
   <li>Implementation may issue <code>#makeCurrent()</code> and <code>#release()</code> while drawable reassociation.</li>
   <li>The user shall take extra care of thread synchronization,
       i.e. lock the involved <a href="GLAutoDrawable.html" title="interface in com.jogamp.opengl"><code>auto-drawable's</code></a>
       <a href="#getUpstreamLock()"><code>upstream-locks</code></a> and <a href="GLDrawable.html#getNativeSurface()"><code>surfaces</code></a>
       to avoid a race condition. See <a href="#locking">GLAutoDrawable Locking</a>.</li>
 </ul>
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>newCtx</code> - the new context, maybe <code>null</code> for dis-association.</dd>
<dd><code>destroyPrevCtx</code> - if <code>true</code>, destroy the previous context if exists</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the previous GLContext, maybe <code>null</code></dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#setGLDrawable(com.jogamp.opengl.GLDrawable,boolean)"><code>GLContext.setGLDrawable(GLDrawable, boolean)</code></a>, 
<a href="GLContext.html#setGLReadDrawable(com.jogamp.opengl.GLDrawable)"><code>GLContext.setGLReadDrawable(GLDrawable)</code></a>, 
<code>GLDrawableHelper.switchContext(GLDrawable, GLContext, boolean, GLContext, int)</code></dd>
</dl>
</li>
</ul>
<a id="addGLEventListener(com.jogamp.opengl.GLEventListener)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addGLEventListener</h4>
<pre class="methodSignature">void&nbsp;addGLEventListener&#8203;(<a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener)</pre>
<div class="block">Adds the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> to the end of this drawable queue.
 The <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listeners</code></a> are notified of events in the order of the queue.
 <p>
 The newly added listener's <a href="GLEventListener.html#init(com.jogamp.opengl.GLAutoDrawable)"><code>init(..)</code></a>
 method will be called once before any other of it's callback methods.
 See <a href="#getGLEventListenerInitState(com.jogamp.opengl.GLEventListener)"><code>getGLEventListenerInitState(GLEventListener)</code></a> for details.
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>listener</code> - The GLEventListener object to be inserted</dd>
</dl>
</li>
</ul>
<a id="addGLEventListener(int,com.jogamp.opengl.GLEventListener)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addGLEventListener</h4>
<pre class="methodSignature">void&nbsp;addGLEventListener&#8203;(int&nbsp;index,
                        <a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener)
                 throws <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/IndexOutOfBoundsException.html?is-external=true" title="class or interface in java.lang" class="externalLink">IndexOutOfBoundsException</a></pre>
<div class="block">Adds the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> at the given index of this drawable queue.
 The <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listeners</code></a> are notified of events in the order of the queue.
 <p>
 The newly added listener's <a href="GLEventListener.html#init(com.jogamp.opengl.GLAutoDrawable)"><code>init(..)</code></a>
 method will be called once before any other of it's callback methods.
 See <a href="#getGLEventListenerInitState(com.jogamp.opengl.GLEventListener)"><code>getGLEventListenerInitState(GLEventListener)</code></a> for details.
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>index</code> - Position where the listener will be inserted.
              Should be within (0 <= index && index <= size()).
              An index value of -1 is interpreted as the end of the list, size().</dd>
<dd><code>listener</code> - The GLEventListener object to be inserted</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/IndexOutOfBoundsException.html?is-external=true" title="class or interface in java.lang" class="externalLink">IndexOutOfBoundsException</a></code> - If the index is not within (0 <= index && index <= size()), or -1</dd>
</dl>
</li>
</ul>
<a id="getGLEventListenerCount()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGLEventListenerCount</h4>
<pre class="methodSignature">int&nbsp;getGLEventListenerCount()</pre>
<div class="block">Returns the number of <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> of this drawable queue.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The number of GLEventListener objects of this drawable queue.</dd>
</dl>
</li>
</ul>
<a id="areAllGLEventListenerInitialized()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>areAllGLEventListenerInitialized</h4>
<pre class="methodSignature">boolean&nbsp;areAllGLEventListenerInitialized()</pre>
<div class="block">Returns true if all added <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> are initialized, otherwise false.</div>
<dl>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>2.2</dd>
</dl>
</li>
</ul>
<a id="getGLEventListener(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGLEventListener</h4>
<pre class="methodSignature"><a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;getGLEventListener&#8203;(int&nbsp;index)
                            throws <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/IndexOutOfBoundsException.html?is-external=true" title="class or interface in java.lang" class="externalLink">IndexOutOfBoundsException</a></pre>
<div class="block">Returns the <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> at the given index of this drawable queue.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>index</code> - Position of the listener to be returned.
              Should be within (0 <= index && index < size()).
              An index value of -1 is interpreted as last listener, size()-1.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The GLEventListener object at the given index.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/IndexOutOfBoundsException.html?is-external=true" title="class or interface in java.lang" class="externalLink">IndexOutOfBoundsException</a></code> - If the index is not within (0 <= index && index < size()), or -1</dd>
</dl>
</li>
</ul>
<a id="getGLEventListenerInitState(com.jogamp.opengl.GLEventListener)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGLEventListenerInitState</h4>
<pre class="methodSignature">boolean&nbsp;getGLEventListenerInitState&#8203;(<a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener)</pre>
<div class="block">Retrieves whether the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> is initialized or not.
 <p>
 After <a href="#addGLEventListener(com.jogamp.opengl.GLEventListener)"><code>adding</code></a> a <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> it is
 marked <i>uninitialized</i> and added to a list of to be initialized <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>.
 If such <i>uninitialized</i> <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>'s handler methods (reshape, display)
 are about to be invoked, it's <a href="GLEventListener.html#init(com.jogamp.opengl.GLAutoDrawable)"><code>init(..)</code></a> method is invoked first.
 Afterwards the <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> is marked <i>initialized</i>
 and removed from the list of to be initialized <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>.
 </p>
 <p>
 This methods returns the <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> initialized state,
 i.e. returns <code>false</code> if it is included in the list of to be initialized <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>,
 otherwise <code>true</code>.
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>listener</code> - the GLEventListener object to query it's initialized state.</dd>
</dl>
</li>
</ul>
<a id="setGLEventListenerInitState(com.jogamp.opengl.GLEventListener,boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setGLEventListenerInitState</h4>
<pre class="methodSignature">void&nbsp;setGLEventListenerInitState&#8203;(<a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener,
                                 boolean&nbsp;initialized)</pre>
<div class="block">Sets the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener's</code></a> initialized state.
 <p>
 This methods allows manually setting the <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> initialized state,
 i.e. adding it to, or removing it from the list of to be initialized <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>.
 See <a href="#getGLEventListenerInitState(com.jogamp.opengl.GLEventListener)"><code>getGLEventListenerInitState(GLEventListener)</code></a> for details.
 </p>
 <p>
 <b>Warning:</b> This method does not validate whether the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener's</code></a>
 is member of this drawable queue, i.e. <a href="#addGLEventListener(com.jogamp.opengl.GLEventListener)"><code>added</code></a>.
 </p>
 <p>
 This method is only exposed to allow users full control over the <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>'s state
 and is usually not recommended to change.
 </p>
 <p>
 One use case is moving a <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a> and their initialized <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>
 from one <a href="GLAutoDrawable.html" title="interface in com.jogamp.opengl"><code>GLAutoDrawable</code></a> to another,
 where a subsequent <a href="GLEventListener.html#init(com.jogamp.opengl.GLAutoDrawable)"><code>init(..)</code></a> call after adding it
 to the new owner is neither required nor desired.
 See <a href="util/GLDrawableUtil.html#swapGLContextAndAllGLEventListener(com.jogamp.opengl.GLAutoDrawable,com.jogamp.opengl.GLAutoDrawable)"><code>swapGLContextAndAllGLEventListener(..)</code></a>.
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>listener</code> - the GLEventListener object to perform a state change.</dd>
<dd><code>initialized</code> - if <code>true</code>, mark the listener initialized, otherwise uninitialized.</dd>
</dl>
</li>
</ul>
<a id="disposeGLEventListener(com.jogamp.opengl.GLEventListener,boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>disposeGLEventListener</h4>
<pre class="methodSignature"><a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;disposeGLEventListener&#8203;(<a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener,
                                       boolean&nbsp;remove)</pre>
<div class="block">Disposes the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> via <a href="GLEventListener.html#dispose(com.jogamp.opengl.GLAutoDrawable)"><code>dispose(..)</code></a>
 if it has been initialized and added to this queue.
 <p>
 If <code>remove</code> is <code>true</code>, the <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> is removed from this drawable queue before disposal,
 otherwise marked uninitialized.
 </p>
 <p>
 If an <a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>GLAnimatorControl</code></a> is being attached and the current thread is different
 than <a href="GLAnimatorControl.html#getThread()"><code>the animator's thread</code></a>, it is paused during the operation.
 </p>
 <p>
 Note that this is an expensive operation, since <a href="GLEventListener.html#dispose(com.jogamp.opengl.GLAutoDrawable)"><code>dispose(..)</code></a>
 is decorated by <a href="GLContext.html#makeCurrent()"><code>GLContext.makeCurrent()</code></a> and <a href="GLContext.html#release()"><code>GLContext.release()</code></a>.
 </p>
 <p>
 Use <a href="#removeGLEventListener(com.jogamp.opengl.GLEventListener)"><code>removeGLEventListener(listener)</code></a> instead
 if you just want to remove the <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> and <i>don't care</i> about the disposal of the it's (OpenGL) resources.
 </p>
 <p>
 Also note that this is done from within a particular drawable's
 <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> handler (reshape, display, etc.), that it is not
 guaranteed that all other listeners will be evaluated properly
 during this update cycle.
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>listener</code> - The GLEventListener object to be disposed and removed if <code>remove</code> is <code>true</code></dd>
<dd><code>remove</code> - pass <code>true</code> to have the <code>listener</code> removed from this drawable queue, otherwise pass <code>false</code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the disposed and/or removed GLEventListener, or null if no action was performed, i.e. listener was not added</dd>
</dl>
</li>
</ul>
<a id="removeGLEventListener(com.jogamp.opengl.GLEventListener)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>removeGLEventListener</h4>
<pre class="methodSignature"><a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;removeGLEventListener&#8203;(<a href="GLEventListener.html" title="interface in com.jogamp.opengl">GLEventListener</a>&nbsp;listener)</pre>
<div class="block">Removes the given <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a> from this drawable queue.
 <p>
 This is an inexpensive operation, since the removed listener's
 <a href="GLEventListener.html#dispose(com.jogamp.opengl.GLAutoDrawable)"><code>dispose(..)</code></a> method will <i>not</i> be called.
 </p>
 <p>
 Use <a href="#disposeGLEventListener(com.jogamp.opengl.GLEventListener,boolean)"><code>disposeGLEventListener(listener, true)</code></a>
 instead to ensure disposal of the <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>listener</code></a>'s (OpenGL) resources.
 </p>
 <p>
 Note that if this is done from within a particular drawable's
 <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a> handler (reshape, display, etc.), that it is not
 guaranteed that all other listeners will be evaluated properly
 during this update cycle.
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>listener</code> - The GLEventListener object to be removed</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the removed GLEventListener, or null if listener was not added</dd>
</dl>
</li>
</ul>
<a id="setAnimator(com.jogamp.opengl.GLAnimatorControl)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setAnimator</h4>
<pre class="methodSignature">void&nbsp;setAnimator&#8203;(<a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl">GLAnimatorControl</a>&nbsp;animatorControl)
          throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Registers the usage of an animator, an <a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>GLAnimatorControl</code></a> implementation.
 The animator will be queried whether it's animating, ie periodically issuing <a href="#display()"><code>display()</code></a> calls or not.
 <p>
 This method shall be called by an animator implementation only,<br>
 e.g. <a href="util/AnimatorBase.html#add(com.jogamp.opengl.GLAutoDrawable)"><code>AnimatorBase.add(com.jogamp.opengl.GLAutoDrawable)</code></a>, passing it's control implementation,<br>
 and <a href="util/AnimatorBase.html#remove(com.jogamp.opengl.GLAutoDrawable)"><code>AnimatorBase.remove(com.jogamp.opengl.GLAutoDrawable)</code></a>, passing <code>null</code>.
 </p>
 <p>
 Impacts <a href="#display()"><code>display()</code></a> and <a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>invoke(boolean, GLRunnable)</code></a> semantics.</p><br></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>animatorControl</code> - <code>null</code> reference indicates no animator is using
                        this <code>GLAutoDrawable</code>,<br>
                        a valid reference indicates an animator is using this <code>GLAutoDrawable</code>.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - if an animator is already registered.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#display()"><code>display()</code></a>, 
<a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>invoke(boolean, GLRunnable)</code></a>, 
<a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>GLAnimatorControl</code></a></dd>
</dl>
</li>
</ul>
<a id="getAnimator()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getAnimator</h4>
<pre class="methodSignature"><a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl">GLAnimatorControl</a>&nbsp;getAnimator()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the registered <a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>GLAnimatorControl</code></a> implementation, using this <code>GLAutoDrawable</code>.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#setAnimator(com.jogamp.opengl.GLAnimatorControl)"><code>setAnimator(com.jogamp.opengl.GLAnimatorControl)</code></a>, 
<a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>GLAnimatorControl</code></a></dd>
</dl>
</li>
</ul>
<a id="setExclusiveContextThread(java.lang.Thread)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setExclusiveContextThread</h4>
<pre class="methodSignature"><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Thread.html?is-external=true" title="class or interface in java.lang" class="externalLink">Thread</a>&nbsp;setExclusiveContextThread&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Thread.html?is-external=true" title="class or interface in java.lang" class="externalLink">Thread</a>&nbsp;t)
                          throws <a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></pre>
<div class="block">Dedicates this instance's <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a> to the given thread.<br/>
 The thread will exclusively claim the <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a> via <a href="#display()"><code>display()</code></a> and not release it
 until <a href="#destroy()"><code>destroy()</code></a> or <code>setExclusiveContextThread(null)</code> has been called.
 <p>
 Default non-exclusive behavior is <i>requested</i> via <code>setExclusiveContextThread(null)</code>,
 which will cause the next call of <a href="#display()"><code>display()</code></a> on the exclusive thread to
 release the <a href="GLContext.html" title="class in com.jogamp.opengl"><code>GLContext</code></a>. Only after it's async release, <a href="#getExclusiveContextThread()"><code>getExclusiveContextThread()</code></a>
 will return <code>null</code>.
 </p>
 <p>
 To release a previous made exclusive thread, a user issues <code>setExclusiveContextThread(null)</code>
 and may poll <a href="#getExclusiveContextThread()"><code>getExclusiveContextThread()</code></a> until it returns <code>null</code>,
 <i>while</i> the exclusive thread is still running.
 </p>
 <p>
 Note: Setting a new exclusive thread without properly releasing a previous one
 will throw an GLException.
 </p>
 <p>
 Note: Utilizing this feature w/ AWT could lead to an AWT-EDT deadlock, depending on the AWT implementation.
 Hence it is advised not to use it with native AWT GLAutoDrawable like GLCanvas.
 </p>
 <p>
 One scenario could be to dedicate the context to the <a href="GLAnimatorControl.html#getThread()"><code>animator thread</code></a>
 and spare redundant context switches, see <a href="util/AnimatorBase.html#setExclusiveContext(boolean)"><code>AnimatorBase.setExclusiveContext(boolean)</code></a>.
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>t</code> - the exclusive thread to claim the context, or <code>null</code> for default operation.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>previous exclusive context thread</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="GLException.html" title="class in com.jogamp.opengl">GLException</a></code> - If an exclusive thread is still active but a new one is attempted to be set</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="util/AnimatorBase.html#setExclusiveContext(boolean)"><code>AnimatorBase.setExclusiveContext(boolean)</code></a></dd>
</dl>
</li>
</ul>
<a id="getExclusiveContextThread()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getExclusiveContextThread</h4>
<pre class="methodSignature"><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Thread.html?is-external=true" title="class or interface in java.lang" class="externalLink">Thread</a>&nbsp;getExclusiveContextThread()</pre>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#setExclusiveContextThread(java.lang.Thread)"><code>setExclusiveContextThread(Thread)</code></a></dd>
</dl>
</li>
</ul>
<a id="invoke(boolean,com.jogamp.opengl.GLRunnable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>invoke</h4>
<pre class="methodSignature">boolean&nbsp;invoke&#8203;(boolean&nbsp;wait,
               <a href="GLRunnable.html" title="interface in com.jogamp.opengl">GLRunnable</a>&nbsp;glRunnable)
        throws <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang" class="externalLink">IllegalStateException</a></pre>
<div class="block">Enqueues a one-shot <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a>,
 which will be executed within the next <a href="#display()"><code>display()</code></a> call
 after all registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s
 <a href="GLEventListener.html#display(com.jogamp.opengl.GLAutoDrawable)"><code>display(GLAutoDrawable)</code></a>
 methods have been called.
 <p>
 If no <a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>GLAnimatorControl</code></a> is animating (default),<br>
 or if the current thread is the animator thread,<br>
 a <a href="#display()"><code>display()</code></a> call is issued after enqueue the <code>GLRunnable</code>,
 hence the <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a> will be executed right away.<br/>
 </p>
 <p>
 If an <a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>animator</code></a> is running,<br>
 no explicit <a href="#display()"><code>display()</code></a> call is issued, allowing the <a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>animator</code></a> to perform at due time.<br>
 </p>
 <p>
 If <code>wait</code> is <code>true</code> the call blocks until the <code>glRunnable</code>
 has been executed by the <a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>animator</code></a>, otherwise the method returns immediately.
 </p>
 <p>
 If <code>wait</code> is <code>true</code> <b>and</b>
 <a href="GLDrawable.html#isRealized()"><code>GLDrawable.isRealized()</code></a> returns <code>false</code> <i>or</i> <a href="#getContext()"><code>getContext()</code></a> returns <code>null</code>,
 the call is ignored and returns <code>false</code>.<br>
 This helps avoiding deadlocking the caller.
 </p>
 <p>
 The internal queue of <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a>'s is being flushed with <a href="#destroy()"><code>destroy()</code></a>
 where all blocked callers are being notified.
 </p>
 <p>
 To avoid a deadlock situation which causes an <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang" class="externalLink"><code>IllegalStateException</code></a> one should
 avoid issuing <a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>invoke</code></a> while this <a href="#locking">GLAutoDrawable is being locked</a>.<br>
 Detected deadlock situations throwing an <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang" class="externalLink"><code>IllegalStateException</code></a> are:
 <ul>
   <li><a href="#getAnimator()"><code>Animator</code></a> is running on another thread and waiting and is locked on current thread, but is not <a href="#isThreadGLCapable()"><code>GL-Thread</code></a></li>
   <li>No <a href="#getAnimator()"><code>Animator</code></a> is running on another thread and is locked on current thread, but is not <a href="#isThreadGLCapable()"><code>GL-Thread</code></a></li>
 </ul>
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>wait</code> - if <code>true</code> block until execution of <code>glRunnable</code> is finished, otherwise return immediately w/o waiting</dd>
<dd><code>glRunnable</code> - the <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a> to execute within <a href="#display()"><code>display()</code></a></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if the <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a> has been processed or queued, otherwise <code>false</code>.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang" class="externalLink">IllegalStateException</a></code> - in case of a detected deadlock situation ahead, see above.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#setAnimator(com.jogamp.opengl.GLAnimatorControl)"><code>setAnimator(GLAnimatorControl)</code></a>, 
<a href="#display()"><code>display()</code></a>, 
<a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a>, 
<a href="#invoke(boolean,java.util.List)"><code>invoke(boolean, List)</code></a>, 
<a href="#flushGLRunnables()"><code>flushGLRunnables()</code></a></dd>
</dl>
</li>
</ul>
<a id="invoke(boolean,java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>invoke</h4>
<pre class="methodSignature">boolean&nbsp;invoke&#8203;(boolean&nbsp;wait,
               <a href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util" class="externalLink">List</a>&lt;<a href="GLRunnable.html" title="interface in com.jogamp.opengl">GLRunnable</a>&gt;&nbsp;glRunnables)
        throws <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang" class="externalLink">IllegalStateException</a></pre>
<div class="block">Extends <a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>invoke(boolean, GLRunnable)</code></a> functionality
 allowing to inject a list of <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a>s.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>wait</code> - if <code>true</code> block until execution of the last <code>glRunnable</code> is finished, otherwise return immediately w/o waiting</dd>
<dd><code>glRunnables</code> - the <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a>s to execute within <a href="#display()"><code>display()</code></a></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if the <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a>s has been processed or queued, otherwise <code>false</code>.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang" class="externalLink">IllegalStateException</a></code> - in case of a detected deadlock situation ahead, see <a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>invoke(boolean, GLRunnable)</code></a>.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>invoke(boolean, GLRunnable)</code></a>, 
<a href="#flushGLRunnables()"><code>flushGLRunnables()</code></a></dd>
</dl>
</li>
</ul>
<a id="flushGLRunnables()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>flushGLRunnables</h4>
<pre class="methodSignature">void&nbsp;flushGLRunnables()</pre>
<div class="block">Flushes all <a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>enqueued</code></a> <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a> of this <a href="GLAutoDrawable.html" title="interface in com.jogamp.opengl"><code>GLAutoDrawable</code></a>
 including notifying waiting executor.
 <p>
 The executor which might have been blocked until notified
 will be unblocked and all tasks removed from the queue.
 </p></div>
<dl>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>2.2</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>invoke(boolean, GLRunnable)</code></a></dd>
</dl>
</li>
</ul>
<a id="destroy()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>destroy</h4>
<pre class="methodSignature">void&nbsp;destroy()</pre>
<div class="block">Destroys all resources associated with this GLAutoDrawable,
      inclusive the GLContext.
      If a window is attached to it's implementation, it shall be closed.
      Causes disposing of all OpenGL resources
      by calling <a href="GLEventListener.html#dispose(com.jogamp.opengl.GLAutoDrawable)"><code>dispose(..)</code></a> for all
      registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s. Called automatically by the
      window system toolkit upon receiving a destroy notification. This
      routine may be called manually.</div>
</li>
</ul>
<a id="display()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>display</h4>
<pre class="methodSignature">void&nbsp;display()</pre>
<div class="block"><p>
 Causes OpenGL rendering to be performed for this GLAutoDrawable
 in the following order:
 <ul>
     <li> Calling <a href="GLEventListener.html#display(com.jogamp.opengl.GLAutoDrawable)"><code>display(..)</code></a> for all
          registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s. </li>
     <li> Executes all one-shot <a href="GLRunnable.html" title="interface in com.jogamp.opengl"><code>GLRunnable</code></a>,
          enqueued via <a href="#invoke(boolean,com.jogamp.opengl.GLRunnable)"><code>invoke(boolean, GLRunnable)</code></a>.</li>
 </ul></p>
 <p>
 May be called periodically by a running <a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>GLAnimatorControl</code></a> implementation,<br>
 which must register itself with <a href="#setAnimator(com.jogamp.opengl.GLAnimatorControl)"><code>setAnimator(com.jogamp.opengl.GLAnimatorControl)</code></a>.</p>
 <p>
 Called automatically by the window system toolkit upon receiving a repaint() request, <br>
 except an <a href="GLAnimatorControl.html" title="interface in com.jogamp.opengl"><code>GLAnimatorControl</code></a> implementation <a href="GLAnimatorControl.html#isAnimating()"><code>GLAnimatorControl.isAnimating()</code></a>.</p>
 <p>
 This routine may also be called manually for better control over the
 rendering process. It is legal to call another GLAutoDrawable's
 display method from within the <a href="GLEventListener.html#display(com.jogamp.opengl.GLAutoDrawable)"><code>display(..)</code></a> callback.</p>
 <p>
 In case of a new generated OpenGL context,
 the implementation shall call <a href="GLEventListener.html#init(com.jogamp.opengl.GLAutoDrawable)"><code>init(..)</code></a> for all
 registered <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>s <i>before</i> making the
 actual <a href="GLEventListener.html#display(com.jogamp.opengl.GLAutoDrawable)"><code>display(..)</code></a> calls,
 in case this has not been done yet.</p></div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#setAnimator(com.jogamp.opengl.GLAnimatorControl)"><code>setAnimator(com.jogamp.opengl.GLAnimatorControl)</code></a></dd>
</dl>
</li>
</ul>
<a id="setAutoSwapBufferMode(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setAutoSwapBufferMode</h4>
<pre class="methodSignature">void&nbsp;setAutoSwapBufferMode&#8203;(boolean&nbsp;enable)</pre>
<div class="block">Enables or disables automatic buffer swapping for this drawable.
      By default this property is set to true; when true, after all
      GLEventListeners have been called for a display() event, the
      front and back buffers are swapped, displaying the results of
      the render. When disabled, the user is responsible for calling
      {@link #swapBuffers(..)} manually.</div>
</li>
</ul>
<a id="getAutoSwapBufferMode()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getAutoSwapBufferMode</h4>
<pre class="methodSignature">boolean&nbsp;getAutoSwapBufferMode()</pre>
<div class="block">Indicates whether automatic buffer swapping is enabled for this
      drawable. See <a href="#setAutoSwapBufferMode(boolean)"><code>setAutoSwapBufferMode(boolean)</code></a>.</div>
</li>
</ul>
<a id="setContextCreationFlags(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setContextCreationFlags</h4>
<pre class="methodSignature">void&nbsp;setContextCreationFlags&#8203;(int&nbsp;flags)</pre>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>flags</code> - Additional context creation flags.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="GLContext.html#setContextCreationFlags(int)"><code>GLContext.setContextCreationFlags(int)</code></a>, 
<a href="GLContext.html#enableGLDebugMessage(boolean)"><code>GLContext.enableGLDebugMessage(boolean)</code></a></dd>
</dl>
</li>
</ul>
<a id="getContextCreationFlags()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getContextCreationFlags</h4>
<pre class="methodSignature">int&nbsp;getContextCreationFlags()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Additional context creation flags</dd>
</dl>
</li>
</ul>
<a id="createContext(com.jogamp.opengl.GLContext)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createContext</h4>
<pre class="methodSignature"><a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a>&nbsp;createContext&#8203;(<a href="GLContext.html" title="class in com.jogamp.opengl">GLContext</a>&nbsp;shareWith)</pre>
<div class="block">Creates a new context for drawing to this drawable that will
 optionally share buffer objects, textures and other server-side OpenGL
 objects with the specified GLContext.
 <p>
 The GLContext <code>share</code> need not be associated with this
 GLDrawable and may be null if sharing of display lists and other
 objects is not desired. See the note in the overview
 documentation
 <a href="../../../overview-summary.html#SHARING">context sharing</a>
 as well as <a href="GLSharedContextSetter.html" title="interface in com.jogamp.opengl"><code>GLSharedContextSetter</code></a>.
 </p>
 <p>
 This GLAutoDrawable implementation holds it's own GLContext reference,
 thus created a GLContext using this methods won't replace it implicitly.
 To replace or set this GLAutoDrawable's GLContext you need to call <a href="#setContext(com.jogamp.opengl.GLContext,boolean)"><code>setContext(GLContext, boolean)</code></a>.
 </p>
 <p>
 The GLAutoDrawable implementation shall also set the
 context creation flags as customized w/ <a href="#setContextCreationFlags(int)"><code>setContextCreationFlags(int)</code></a>.
 </p></div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="GLDrawable.html#createContext(com.jogamp.opengl.GLContext)">createContext</a></code>&nbsp;in interface&nbsp;<code><a href="GLDrawable.html" title="interface in com.jogamp.opengl">GLDrawable</a></code></dd>
</dl>
</li>
</ul>
<a id="getGL()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGL</h4>
<pre class="methodSignature"><a href="GL.html" title="interface in com.jogamp.opengl">GL</a>&nbsp;getGL()</pre>
<div class="block">Returns the <a href="GL.html" title="interface in com.jogamp.opengl"><code>GL</code></a> pipeline object this GLAutoDrawable uses.
      If this method is called outside of the <a href="GLEventListener.html" title="interface in com.jogamp.opengl"><code>GLEventListener</code></a>'s callback methods (init, display, etc.) it may
      return null. Users should not rely on the identity of the
      returned GL object; for example, users should not maintain a
      hash table with the GL object as the key. Additionally, the GL
      object should not be cached in client code, but should be
      re-fetched from the GLAutoDrawable at the beginning of each call
      to init, display, etc.</div>
</li>
</ul>
<a id="setGL(com.jogamp.opengl.GL)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setGL</h4>
<pre class="methodSignature"><a href="GL.html" title="interface in com.jogamp.opengl">GL</a>&nbsp;setGL&#8203;(<a href="GL.html" title="interface in com.jogamp.opengl">GL</a>&nbsp;gl)</pre>
<div class="block">Sets the <a href="GL.html" title="interface in com.jogamp.opengl"><code>GL</code></a> pipeline object this GLAutoDrawable uses.
      This should only be called from within the GLEventListener's
      callback methods, and usually only from within the init()
      method, in order to install a composable pipeline. See the JOGL
      demos for examples.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the set GL pipeline or null if not successful</dd>
</dl>
</li>
</ul>
<a id="getUpstreamWidget()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getUpstreamWidget</h4>
<pre class="methodSignature"><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a>&nbsp;getUpstreamWidget()</pre>
<div class="block">Method <i>may</i> return the upstream UI toolkit object
 holding this <a href="GLAutoDrawable.html" title="interface in com.jogamp.opengl"><code>GLAutoDrawable</code></a> instance, if exist.
 <p>
 Currently known Java UI toolkits and it's known return types are:

 <table border="1">
     <tr><td>Toolkit</td>  <td>GLAutoDrawable Implementation</td>            <td>~</td>      <td>Return Type of getUpstreamWidget()</td</tr>
     <tr><td>NEWT</td>     <td><code>GLWindow</code></td>  <td>has a</td>  <td><code>Window</code></td</tr>
     <tr><td>SWT</td>      <td><a href="swt/GLCanvas.html" title="class in com.jogamp.opengl.swt"><code>GLCanvas</code></a></td>   <td>is a</td>   <td><code>Canvas</code></td</tr>
     <tr><td>AWT</td>      <td><a href="awt/GLCanvas.html" title="class in com.jogamp.opengl.awt"><code>GLCanvas</code></a></td>  <td>is a</td>   <td><a href="http://docs.oracle.com/javase/6/docs/api/java/awt/Canvas.html?is-external=true" title="class or interface in java.awt" class="externalLink"><code>Canvas</code></a></td</tr>
     <tr><td>AWT</td>      <td><a href="awt/GLJPanel.html" title="class in com.jogamp.opengl.awt"><code>GLJPanel</code></a></td>  <td>is a</td>   <td><a href="http://docs.oracle.com/javase/6/docs/api/javax/swing/JPanel.html?is-external=true" title="class or interface in javax.swing" class="externalLink"><code>JPanel</code></a></td</tr>
 </table>
 However, the result may be other object types than the listed above
 due to new supported toolkits.
 </p>
 <p>
 This method may also return <code>null</code> if no UI toolkit is being used,
 as common for offscreen rendering.
 </p></div>
</li>
</ul>
<a id="getUpstreamLock()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getUpstreamLock</h4>
<pre class="methodSignature"><a href="../../../../../gluegen/javadoc/com/jogamp/common/util/locks/RecursiveLock.html?is-external=true" title="class or interface in com.jogamp.common.util.locks" class="externalLink">RecursiveLock</a>&nbsp;getUpstreamLock()</pre>
<div class="block">Returns the recursive lock object of the <a href="#getUpstreamWidget()"><code>upstream widget</code></a>
 to synchronize multithreaded access on top of <a href="../../../../javadoc_nativewindow_spec/com/jogamp/nativewindow/NativeSurface.html?is-external=true#lockSurface()" title="class or interface in com.jogamp.nativewindow" class="externalLink"><code>NativeSurface.lockSurface()</code></a>.
 <p>
 See <a href="#locking">GLAutoDrawable Locking</a>.
 </p></div>
<dl>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>2.2</dd>
</dl>
</li>
</ul>
<a id="isThreadGLCapable()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>isThreadGLCapable</h4>
<pre class="methodSignature">boolean&nbsp;isThreadGLCapable()</pre>
<div class="block">Indicates whether the current thread is capable of
 performing OpenGL-related work.
 <p>
 Implementation utilizes this knowledge to determine
 whether <a href="#display()"><code>display()</code></a> performs the OpenGL commands on the current thread directly
 or spawns them on the dedicated OpenGL thread.
 </p></div>
<dl>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>2.2</dd>
</dl>
</li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
</div>
</main>
<!-- ========= END OF CLASS DATA ========= -->
<footer role="contentinfo">
<nav role="navigation">
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a id="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-all.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../index.html?com/jogamp/opengl/GLAutoDrawable.html" target="_top">Frames</a></li>
<li><a href="GLAutoDrawable.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</nav>
<p class="legalCopy"><small>Copyright 2010 JogAmp Community.</small></p>
</footer>
</body>
</html>
