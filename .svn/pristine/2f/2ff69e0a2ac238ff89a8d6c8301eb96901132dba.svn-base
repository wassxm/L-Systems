<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (11.0.16) on Wed Feb 01 19:32:53 CET 2023 -->
<title>VectorUtil (JOGL, NativeWindow and NEWT APIs)</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="dc.created" content="2023-02-01">
<link rel="stylesheet" type="text/css" href="../../../../stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="../../../../jquery/jquery-ui.css" title="Style">
<script type="text/javascript" src="../../../../script.js"></script>
<script type="text/javascript" src="../../../../jquery/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="../../../../jquery/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="../../../../jquery/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="../../../../jquery/jquery-3.5.1.js"></script>
<script type="text/javascript" src="../../../../jquery/jquery-ui.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="VectorUtil (JOGL, NativeWindow and NEWT APIs)";
        }
    }
    catch(err) {
    }
//-->
var data = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":9,"i5":9,"i6":9,"i7":9,"i8":9,"i9":9,"i10":9,"i11":9,"i12":9,"i13":9,"i14":9,"i15":9,"i16":9,"i17":9,"i18":9,"i19":9,"i20":9,"i21":9,"i22":9,"i23":9,"i24":9,"i25":9,"i26":9,"i27":9,"i28":9,"i29":9,"i30":9,"i31":9,"i32":9,"i33":9,"i34":9,"i35":9,"i36":9,"i37":9,"i38":9,"i39":9,"i40":9,"i41":9,"i42":9,"i43":9,"i44":9,"i45":9,"i46":9,"i47":9,"i48":9,"i49":9,"i50":9,"i51":9,"i52":9,"i53":9,"i54":9,"i55":9,"i56":9,"i57":9,"i58":9,"i59":9,"i60":9,"i61":9,"i62":9,"i63":9,"i64":9,"i65":9,"i66":9,"i67":9,"i68":9,"i69":9};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
var pathtoroot = "../../../../";
var useModuleDirectories = true;
loadScripts(document, 'script');</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<header role="banner">
<nav role="navigation">
<div class="fixedNav">
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a id="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-all.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../../index.html?com/jogamp/opengl/math/VectorUtil.html" target="_top">Frames</a></li>
<li><a href="VectorUtil.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<ul class="navListSearch">
<li><label for="search">SEARCH:</label>
<input type="text" id="search" value="search" disabled="disabled">
<input type="reset" id="reset" value="reset" disabled="disabled">
</li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
</div>
<div class="navPadding">&nbsp;</div>
<script type="text/javascript"><!--
$('.navPadding').css('padding-top', $('.fixedNav').css("height"));
//-->
</script>
</nav>
</header>
<!-- ======== START OF CLASS DATA ======== -->
<main role="main">
<div class="header">
<div class="subTitle"><span class="packageLabelInType">Package</span>&nbsp;<a href="package-summary.html">com.jogamp.opengl.math</a></div>
<h2 title="Class VectorUtil" class="title">Class VectorUtil</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">java.lang.Object</a></li>
<li>
<ul class="inheritance">
<li>com.jogamp.opengl.math.VectorUtil</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<pre>public final class <span class="typeNameLabel">VectorUtil</span>
extends <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a></pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<table class="memberSummary">
<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Class</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="VectorUtil.Winding.html" title="enum in com.jogamp.opengl.math">VectorUtil.Winding</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- =========== FIELD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Field</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#VEC3_ONE">VEC3_ONE</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#VEC3_UNIT_Y">VEC3_UNIT_Y</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#VEC3_UNIT_Y_NEG">VEC3_UNIT_Y_NEG</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#VEC3_UNIT_Z">VEC3_UNIT_Z</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#VEC3_UNIT_Z_NEG">VEC3_UNIT_Z_NEG</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#VEC3_ZERO">VEC3_ZERO</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Constructor</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<th class="colConstructorName" scope="row"><code><span class="memberNameLink"><a href="#%3Cinit%3E()">VectorUtil</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- ========== METHOD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Method</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#addVec2(float%5B%5D,float%5B%5D,float%5B%5D)">addVec2</a></span>&#8203;(float[]&nbsp;result,
       float[]&nbsp;v1,
       float[]&nbsp;v2)</code></th>
<td class="colLast">
<div class="block">Adds two vectors, result = v1 + v2</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#addVec3(float%5B%5D,float%5B%5D,float%5B%5D)">addVec3</a></span>&#8203;(float[]&nbsp;result,
       float[]&nbsp;v1,
       float[]&nbsp;v2)</code></th>
<td class="colLast">
<div class="block">Adds two vectors, result = v1 + v2</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#angleVec3(float%5B%5D,float%5B%5D)">angleVec3</a></span>&#8203;(float[]&nbsp;vec1,
         float[]&nbsp;vec2)</code></th>
<td class="colLast">
<div class="block">Return the angle between to vectors in radians</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#area(java.util.ArrayList)">area</a></span>&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true" title="class or interface in java.util" class="externalLink">ArrayList</a>&lt;? extends <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&gt;&nbsp;vertices)</code></th>
<td class="colLast">
<div class="block">Computes the area of a list of vertices to check if ccw</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#ccw(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">ccw</a></span>&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
   <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
   <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c)</code></th>
<td class="colLast">
<div class="block">Check if points are in ccw order</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#copyVec2(float%5B%5D,int,float%5B%5D,int)">copyVec2</a></span>&#8203;(float[]&nbsp;dst,
        int&nbsp;dstOffset,
        float[]&nbsp;src,
        int&nbsp;srcOffset)</code></th>
<td class="colLast">
<div class="block">Copies a vector of length 2</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#copyVec3(float%5B%5D,int,float%5B%5D,int)">copyVec3</a></span>&#8203;(float[]&nbsp;dst,
        int&nbsp;dstOffset,
        float[]&nbsp;src,
        int&nbsp;srcOffset)</code></th>
<td class="colLast">
<div class="block">Copies a vector of length 3</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#copyVec4(float%5B%5D,int,float%5B%5D,int)">copyVec4</a></span>&#8203;(float[]&nbsp;dst,
        int&nbsp;dstOffset,
        float[]&nbsp;src,
        int&nbsp;srcOffset)</code></th>
<td class="colLast">
<div class="block">Copies a vector of length 4</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#cosAngleVec3(float%5B%5D,float%5B%5D)">cosAngleVec3</a></span>&#8203;(float[]&nbsp;vec1,
            float[]&nbsp;vec2)</code></th>
<td class="colLast">
<div class="block">Return the cosines of the angle between to vectors</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#crossVec3(float%5B%5D,float%5B%5D,float%5B%5D)">crossVec3</a></span>&#8203;(float[]&nbsp;result,
         float[]&nbsp;v1,
         float[]&nbsp;v2)</code></th>
<td class="colLast">
<div class="block">cross product vec1 x vec2</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#crossVec3(float%5B%5D,int,float%5B%5D,int,float%5B%5D,int)">crossVec3</a></span>&#8203;(float[]&nbsp;r,
         int&nbsp;r_offset,
         float[]&nbsp;v1,
         int&nbsp;v1_offset,
         float[]&nbsp;v2,
         int&nbsp;v2_offset)</code></th>
<td class="colLast">
<div class="block">cross product vec1 x vec2</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#determinantVec3(float%5B%5D,float%5B%5D,float%5B%5D)">determinantVec3</a></span>&#8203;(float[]&nbsp;a,
               float[]&nbsp;b,
               float[]&nbsp;c)</code></th>
<td class="colLast">
<div class="block">Return the determinant of 3 vectors</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#distSquareVec3(float%5B%5D,float%5B%5D)">distSquareVec3</a></span>&#8203;(float[]&nbsp;v1,
              float[]&nbsp;v2)</code></th>
<td class="colLast">
<div class="block">Return the squared distance between the given two points described vector v1 and v2.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#distVec3(float%5B%5D,float%5B%5D)">distVec3</a></span>&#8203;(float[]&nbsp;v1,
        float[]&nbsp;v2)</code></th>
<td class="colLast">
<div class="block">Return the distance between the given two points described vector v1 and v2.</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#divVec2(float%5B%5D,float%5B%5D,float)">divVec2</a></span>&#8203;(float[]&nbsp;result,
       float[]&nbsp;vector,
       float&nbsp;scale)</code></th>
<td class="colLast">
<div class="block">Divides a vector by param using given result float[], result = vector / scale</div>
</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#divVec2(float%5B%5D,float%5B%5D,float%5B%5D)">divVec2</a></span>&#8203;(float[]&nbsp;result,
       float[]&nbsp;vector,
       float[]&nbsp;scale)</code></th>
<td class="colLast">
<div class="block">Divides a vector by param using given result float[], result = vector / scale</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#divVec3(float%5B%5D,float%5B%5D,float)">divVec3</a></span>&#8203;(float[]&nbsp;result,
       float[]&nbsp;vector,
       float&nbsp;scale)</code></th>
<td class="colLast">
<div class="block">Divides a vector by param using given result float[], result = vector / scale</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#divVec3(float%5B%5D,float%5B%5D,float%5B%5D)">divVec3</a></span>&#8203;(float[]&nbsp;result,
       float[]&nbsp;vector,
       float[]&nbsp;scale)</code></th>
<td class="colLast">
<div class="block">Divides a vector by param using given result float[], result = vector / scale</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#dotVec3(float%5B%5D,float%5B%5D)">dotVec3</a></span>&#8203;(float[]&nbsp;vec1,
       float[]&nbsp;vec2)</code></th>
<td class="colLast">
<div class="block">Return the dot product of two points</div>
</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getNormalVec2(float%5B%5D,float%5B%5D,float%5B%5D)">getNormalVec2</a></span>&#8203;(float[]&nbsp;result,
             float[]&nbsp;v1,
             float[]&nbsp;v2)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getNormalVec3(float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D)">getNormalVec3</a></span>&#8203;(float[]&nbsp;result,
             float[]&nbsp;v1,
             float[]&nbsp;v2,
             float[]&nbsp;v3,
             float[]&nbsp;tmp1Vec3,
             float[]&nbsp;tmp2Vec3)</code></th>
<td class="colLast">
<div class="block">Returns the 3d surface normal of a triangle given three vertices.</div>
</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getPlaneVec3(float%5B%5D,float%5B%5D,float%5B%5D)">getPlaneVec3</a></span>&#8203;(float[]&nbsp;resultV4,
            float[]&nbsp;normalVec3,
            float[]&nbsp;pVec3)</code></th>
<td class="colLast">
<div class="block">Finds the plane equation of a plane given its normal and a point on the plane.</div>
</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getPlaneVec3(float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D)">getPlaneVec3</a></span>&#8203;(float[]&nbsp;resultVec4,
            float[]&nbsp;v1,
            float[]&nbsp;v2,
            float[]&nbsp;v3,
            float[]&nbsp;temp1V3,
            float[]&nbsp;temp2V3)</code></th>
<td class="colLast">
<div class="block">This finds the plane equation of a triangle given three vertices.</div>
</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>static <a href="VectorUtil.Winding.html" title="enum in com.jogamp.opengl.math">VectorUtil.Winding</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getWinding(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">getWinding</a></span>&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
          <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
          <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c)</code></th>
<td class="colLast">
<div class="block">Compute the winding of given points</div>
</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code>static <a href="VectorUtil.Winding.html" title="enum in com.jogamp.opengl.math">VectorUtil.Winding</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getWinding(java.util.ArrayList)">getWinding</a></span>&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true" title="class or interface in java.util" class="externalLink">ArrayList</a>&lt;? extends <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&gt;&nbsp;vertices)</code></th>
<td class="colLast">
<div class="block">Compute the  general winding of the vertices</div>
</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isCollinearVec3(float%5B%5D,float%5B%5D,float%5B%5D)">isCollinearVec3</a></span>&#8203;(float[]&nbsp;v1,
               float[]&nbsp;v2,
               float[]&nbsp;v3)</code></th>
<td class="colLast">
<div class="block">Check if three vertices are colliniear</div>
</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isInCircleVec2(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">isInCircleVec2</a></span>&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d)</code></th>
<td class="colLast">
<div class="block">Check if vertices in triangle circumcircle</div>
</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isInTriangleVec3(float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D)">isInTriangleVec3</a></span>&#8203;(float[]&nbsp;a,
                float[]&nbsp;b,
                float[]&nbsp;c,
                float[]&nbsp;p,
                float[]&nbsp;ac,
                float[]&nbsp;ab,
                float[]&nbsp;ap)</code></th>
<td class="colLast">
<div class="block">Check if a vertex is in triangle using
 barycentric coordinates computation.</div>
</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVec2Equal(float%5B%5D,int,float%5B%5D,int)">isVec2Equal</a></span>&#8203;(float[]&nbsp;vec1,
           int&nbsp;vec1Offset,
           float[]&nbsp;vec2,
           int&nbsp;vec2Offset)</code></th>
<td class="colLast">
<div class="block">Return true if both vectors are equal w/o regarding an epsilon.</div>
</td>
</tr>
<tr id="i29" class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVec2Equal(float%5B%5D,int,float%5B%5D,int,float)">isVec2Equal</a></span>&#8203;(float[]&nbsp;vec1,
           int&nbsp;vec1Offset,
           float[]&nbsp;vec2,
           int&nbsp;vec2Offset,
           float&nbsp;epsilon)</code></th>
<td class="colLast">
<div class="block">Return true if both vectors are equal, i.e.</div>
</td>
</tr>
<tr id="i30" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVec2Zero(float%5B%5D,int)">isVec2Zero</a></span>&#8203;(float[]&nbsp;vec,
          int&nbsp;vecOffset)</code></th>
<td class="colLast">
<div class="block">Return true if vector is zero, no <a href="FloatUtil.html#EPSILON"><code>FloatUtil.EPSILON</code></a> is taken into consideration.</div>
</td>
</tr>
<tr id="i31" class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVec2Zero(float%5B%5D,int,float)">isVec2Zero</a></span>&#8203;(float[]&nbsp;vec,
          int&nbsp;vecOffset,
          float&nbsp;epsilon)</code></th>
<td class="colLast">
<div class="block">Return true if vector is zero, i.e.</div>
</td>
</tr>
<tr id="i32" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVec3Equal(float%5B%5D,int,float%5B%5D,int)">isVec3Equal</a></span>&#8203;(float[]&nbsp;vec1,
           int&nbsp;vec1Offset,
           float[]&nbsp;vec2,
           int&nbsp;vec2Offset)</code></th>
<td class="colLast">
<div class="block">Return true if both vectors are equal w/o regarding an epsilon.</div>
</td>
</tr>
<tr id="i33" class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVec3Equal(float%5B%5D,int,float%5B%5D,int,float)">isVec3Equal</a></span>&#8203;(float[]&nbsp;vec1,
           int&nbsp;vec1Offset,
           float[]&nbsp;vec2,
           int&nbsp;vec2Offset,
           float&nbsp;epsilon)</code></th>
<td class="colLast">
<div class="block">Return true if both vectors are equal, i.e.</div>
</td>
</tr>
<tr id="i34" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVec3InTriangle3(float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D)">isVec3InTriangle3</a></span>&#8203;(float[]&nbsp;a,
                 float[]&nbsp;b,
                 float[]&nbsp;c,
                 float[]&nbsp;p1,
                 float[]&nbsp;p2,
                 float[]&nbsp;p3,
                 float[]&nbsp;tmpAC,
                 float[]&nbsp;tmpAB,
                 float[]&nbsp;tmpAP)</code></th>
<td class="colLast">
<div class="block">Check if one of three vertices are in triangle using
 barycentric coordinates computation.</div>
</td>
</tr>
<tr id="i35" class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVec3InTriangle3(float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float%5B%5D,float)">isVec3InTriangle3</a></span>&#8203;(float[]&nbsp;a,
                 float[]&nbsp;b,
                 float[]&nbsp;c,
                 float[]&nbsp;p1,
                 float[]&nbsp;p2,
                 float[]&nbsp;p3,
                 float[]&nbsp;tmpAC,
                 float[]&nbsp;tmpAB,
                 float[]&nbsp;tmpAP,
                 float&nbsp;epsilon)</code></th>
<td class="colLast">
<div class="block">Check if one of three vertices are in triangle using
 barycentric coordinates computation, using given epsilon for comparison.</div>
</td>
</tr>
<tr id="i36" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVec3Zero(float%5B%5D,int)">isVec3Zero</a></span>&#8203;(float[]&nbsp;vec,
          int&nbsp;vecOffset)</code></th>
<td class="colLast">
<div class="block">Return true if vector is zero, no <a href="FloatUtil.html#EPSILON"><code>FloatUtil.EPSILON</code></a> is taken into consideration.</div>
</td>
</tr>
<tr id="i37" class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isVec3Zero(float%5B%5D,int,float)">isVec3Zero</a></span>&#8203;(float[]&nbsp;vec,
          int&nbsp;vecOffset,
          float&nbsp;epsilon)</code></th>
<td class="colLast">
<div class="block">Return true if vector is zero, i.e.</div>
</td>
</tr>
<tr id="i38" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isZero(float,float,float)">isZero</a></span>&#8203;(float&nbsp;x,
      float&nbsp;y,
      float&nbsp;epsilon)</code></th>
<td class="colLast">
<div class="block">Return true if all two vector components are zero, i.e.</div>
</td>
</tr>
<tr id="i39" class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isZero(float,float,float,float)">isZero</a></span>&#8203;(float&nbsp;x,
      float&nbsp;y,
      float&nbsp;z,
      float&nbsp;epsilon)</code></th>
<td class="colLast">
<div class="block">Return true if all three vector components are zero, i.e.</div>
</td>
</tr>
<tr id="i40" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#line2lineIntersection(float%5B%5D,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">line2lineIntersection</a></span>&#8203;(float[]&nbsp;result,
                     <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                     <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                     <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                     <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d)</code></th>
<td class="colLast">
<div class="block">Compute intersection between two lines</div>
</td>
</tr>
<tr id="i41" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#line2PlaneIntersection(float%5B%5D,com.jogamp.opengl.math.Ray,float%5B%5D,float)">line2PlaneIntersection</a></span>&#8203;(float[]&nbsp;result,
                      <a href="Ray.html" title="class in com.jogamp.opengl.math">Ray</a>&nbsp;ray,
                      float[]&nbsp;plane,
                      float&nbsp;epsilon)</code></th>
<td class="colLast">
<div class="block">Return intersection of an infinite line with a plane if exists, otherwise null.</div>
</td>
</tr>
<tr id="i42" class="altColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#mid(float,float)">mid</a></span>&#8203;(float&nbsp;p1,
   float&nbsp;p2)</code></th>
<td class="colLast">
<div class="block">Calculate the midpoint of two values</div>
</td>
</tr>
<tr id="i43" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#midVec3(float%5B%5D,float%5B%5D,float%5B%5D)">midVec3</a></span>&#8203;(float[]&nbsp;result,
       float[]&nbsp;p1,
       float[]&nbsp;p2)</code></th>
<td class="colLast">
<div class="block">Calculate the midpoint of two points</div>
</td>
</tr>
<tr id="i44" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#mulColMat4Vec3(float%5B%5D,float%5B%5D,float%5B%5D)">mulColMat4Vec3</a></span>&#8203;(float[]&nbsp;result,
              float[]&nbsp;colMatrix,
              float[]&nbsp;vec)</code></th>
<td class="colLast">
<div class="block">Multiplication of column-major 4x4 matrix with vector</div>
</td>
</tr>
<tr id="i45" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#mulRowMat4Vec3(float%5B%5D,float%5B%5D,float%5B%5D)">mulRowMat4Vec3</a></span>&#8203;(float[]&nbsp;result,
              float[]&nbsp;rawMatrix,
              float[]&nbsp;vec)</code></th>
<td class="colLast">
<div class="block">Matrix Vector multiplication</div>
</td>
</tr>
<tr id="i46" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normalizeVec2(float%5B%5D)">normalizeVec2</a></span>&#8203;(float[]&nbsp;vector)</code></th>
<td class="colLast">
<div class="block">Normalize a vector in place</div>
</td>
</tr>
<tr id="i47" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normalizeVec2(float%5B%5D,float%5B%5D)">normalizeVec2</a></span>&#8203;(float[]&nbsp;result,
             float[]&nbsp;vector)</code></th>
<td class="colLast">
<div class="block">Normalize a vector</div>
</td>
</tr>
<tr id="i48" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normalizeVec3(float%5B%5D)">normalizeVec3</a></span>&#8203;(float[]&nbsp;vector)</code></th>
<td class="colLast">
<div class="block">Normalize a vector in place</div>
</td>
</tr>
<tr id="i49" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normalizeVec3(float%5B%5D,float%5B%5D)">normalizeVec3</a></span>&#8203;(float[]&nbsp;result,
             float[]&nbsp;vector)</code></th>
<td class="colLast">
<div class="block">Normalize a vector</div>
</td>
</tr>
<tr id="i50" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normalizeVec3(float%5B%5D,int)">normalizeVec3</a></span>&#8203;(float[]&nbsp;vector,
             int&nbsp;offset)</code></th>
<td class="colLast">
<div class="block">Normalize a vector in place</div>
</td>
</tr>
<tr id="i51" class="rowColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normSquareVec2(float%5B%5D)">normSquareVec2</a></span>&#8203;(float[]&nbsp;vec)</code></th>
<td class="colLast">
<div class="block">Return the squared length of a vector, a.k.a the squared <i>norm</i> or squared <i>magnitude</i></div>
</td>
</tr>
<tr id="i52" class="altColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normSquareVec2(float%5B%5D,int)">normSquareVec2</a></span>&#8203;(float[]&nbsp;vec,
              int&nbsp;offset)</code></th>
<td class="colLast">
<div class="block">Return the squared length of a vector, a.k.a the squared <i>norm</i> or squared <i>magnitude</i></div>
</td>
</tr>
<tr id="i53" class="rowColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normSquareVec3(float%5B%5D)">normSquareVec3</a></span>&#8203;(float[]&nbsp;vec)</code></th>
<td class="colLast">
<div class="block">Return the squared length of a vector, a.k.a the squared <i>norm</i> or squared <i>magnitude</i></div>
</td>
</tr>
<tr id="i54" class="altColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normSquareVec3(float%5B%5D,int)">normSquareVec3</a></span>&#8203;(float[]&nbsp;vec,
              int&nbsp;offset)</code></th>
<td class="colLast">
<div class="block">Return the squared length of a vector, a.k.a the squared <i>norm</i> or squared <i>magnitude</i></div>
</td>
</tr>
<tr id="i55" class="rowColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normVec2(float%5B%5D)">normVec2</a></span>&#8203;(float[]&nbsp;vec)</code></th>
<td class="colLast">
<div class="block">Return the length of a vector, a.k.a the <i>norm</i> or <i>magnitude</i></div>
</td>
</tr>
<tr id="i56" class="altColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#normVec3(float%5B%5D)">normVec3</a></span>&#8203;(float[]&nbsp;vec)</code></th>
<td class="colLast">
<div class="block">Return the length of a vector, a.k.a the <i>norm</i> or <i>magnitude</i></div>
</td>
</tr>
<tr id="i57" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#scaleVec2(float%5B%5D,float%5B%5D,float)">scaleVec2</a></span>&#8203;(float[]&nbsp;result,
         float[]&nbsp;vector,
         float&nbsp;scale)</code></th>
<td class="colLast">
<div class="block">Scales a vector by param using given result float[], result = vector * scale</div>
</td>
</tr>
<tr id="i58" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#scaleVec2(float%5B%5D,float%5B%5D,float%5B%5D)">scaleVec2</a></span>&#8203;(float[]&nbsp;result,
         float[]&nbsp;vector,
         float[]&nbsp;scale)</code></th>
<td class="colLast">
<div class="block">Scales a vector by param using given result float[], result = vector * scale</div>
</td>
</tr>
<tr id="i59" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#scaleVec3(float%5B%5D,float%5B%5D,float)">scaleVec3</a></span>&#8203;(float[]&nbsp;result,
         float[]&nbsp;vector,
         float&nbsp;scale)</code></th>
<td class="colLast">
<div class="block">Scales a vector by param using given result float[], result = vector * scale</div>
</td>
</tr>
<tr id="i60" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#scaleVec3(float%5B%5D,float%5B%5D,float%5B%5D)">scaleVec3</a></span>&#8203;(float[]&nbsp;result,
         float[]&nbsp;vector,
         float[]&nbsp;scale)</code></th>
<td class="colLast">
<div class="block">Scales a vector by param using given result float[], result = vector * scale</div>
</td>
</tr>
<tr id="i61" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#seg2SegIntersection(float%5B%5D,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">seg2SegIntersection</a></span>&#8203;(float[]&nbsp;result,
                   <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                   <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                   <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                   <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d)</code></th>
<td class="colLast">
<div class="block">Compute intersection between two segments</div>
</td>
</tr>
<tr id="i62" class="altColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#subVec2(float%5B%5D,float%5B%5D,float%5B%5D)">subVec2</a></span>&#8203;(float[]&nbsp;result,
       float[]&nbsp;v1,
       float[]&nbsp;v2)</code></th>
<td class="colLast">
<div class="block">Subtracts two vectors, result = v1 - v2</div>
</td>
</tr>
<tr id="i63" class="rowColor">
<td class="colFirst"><code>static float[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#subVec3(float%5B%5D,float%5B%5D,float%5B%5D)">subVec3</a></span>&#8203;(float[]&nbsp;result,
       float[]&nbsp;v1,
       float[]&nbsp;v2)</code></th>
<td class="colLast">
<div class="block">Subtracts two vectors, result = v1 - v2</div>
</td>
</tr>
<tr id="i64" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSeg2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">testSeg2SegIntersection</a></span>&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d)</code></th>
<td class="colLast">
<div class="block">Compute intersection between two segments</div>
</td>
</tr>
<tr id="i65" class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSeg2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,float)">testSeg2SegIntersection</a></span>&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d,
                       float&nbsp;epsilon)</code></th>
<td class="colLast">
<div class="block">Compute intersection between two segments, using given epsilon for comparison.</div>
</td>
</tr>
<tr id="i66" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testTri2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">testTri2SegIntersection</a></span>&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;e)</code></th>
<td class="colLast">
<div class="block">Check if a segment intersects with a triangle</div>
</td>
</tr>
<tr id="i67" class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testTri2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,float)">testTri2SegIntersection</a></span>&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d,
                       <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;e,
                       float&nbsp;epsilon)</code></th>
<td class="colLast">
<div class="block">Check if a segment intersects with a triangle, using given epsilon for comparison.</div>
</td>
</tr>
<tr id="i68" class="altColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#triAreaVec2(float%5B%5D,float%5B%5D,float%5B%5D)">triAreaVec2</a></span>&#8203;(float[]&nbsp;A,
           float[]&nbsp;B,
           float[]&nbsp;C)</code></th>
<td class="colLast">
<div class="block">Computes oriented area of a triangle</div>
</td>
</tr>
<tr id="i69" class="rowColor">
<td class="colFirst"><code>static float</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#triAreaVec2(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">triAreaVec2</a></span>&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
           <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
           <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c)</code></th>
<td class="colLast">
<div class="block">Computes oriented area of a triangle</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a id="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a></h3>
<code><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang" class="externalLink">equals</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang" class="externalLink">getClass</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang" class="externalLink">hashCode</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang" class="externalLink">notify</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang" class="externalLink">notifyAll</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang" class="externalLink">toString</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang" class="externalLink">wait</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang" class="externalLink">wait</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long,int)" title="class or interface in java.lang" class="externalLink">wait</a></code></li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a id="VEC3_ONE">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>VEC3_ONE</h4>
<pre>public static final&nbsp;float[] VEC3_ONE</pre>
</li>
</ul>
<a id="VEC3_ZERO">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>VEC3_ZERO</h4>
<pre>public static final&nbsp;float[] VEC3_ZERO</pre>
</li>
</ul>
<a id="VEC3_UNIT_Y">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>VEC3_UNIT_Y</h4>
<pre>public static final&nbsp;float[] VEC3_UNIT_Y</pre>
</li>
</ul>
<a id="VEC3_UNIT_Y_NEG">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>VEC3_UNIT_Y_NEG</h4>
<pre>public static final&nbsp;float[] VEC3_UNIT_Y_NEG</pre>
</li>
</ul>
<a id="VEC3_UNIT_Z">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>VEC3_UNIT_Z</h4>
<pre>public static final&nbsp;float[] VEC3_UNIT_Z</pre>
</li>
</ul>
<a id="VEC3_UNIT_Z_NEG">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>VEC3_UNIT_Z_NEG</h4>
<pre>public static final&nbsp;float[] VEC3_UNIT_Z_NEG</pre>
</li>
</ul>
</li>
</ul>
</section>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a id="&lt;init&gt;()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>VectorUtil</h4>
<pre>public&nbsp;VectorUtil()</pre>
</li>
</ul>
</li>
</ul>
</section>
<!-- ============ METHOD DETAIL ========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a id="copyVec2(float[],int,float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>copyVec2</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;copyVec2&#8203;(float[]&nbsp;dst,
                               int&nbsp;dstOffset,
                               float[]&nbsp;src,
                               int&nbsp;srcOffset)</pre>
<div class="block">Copies a vector of length 2</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>dst</code> - output vector</dd>
<dd><code>dstOffset</code> - offset of dst in array</dd>
<dd><code>src</code> - input vector</dd>
<dd><code>srcOffset</code> - offset of src in array</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>copied output vector for chaining</dd>
</dl>
</li>
</ul>
<a id="copyVec3(float[],int,float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>copyVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;copyVec3&#8203;(float[]&nbsp;dst,
                               int&nbsp;dstOffset,
                               float[]&nbsp;src,
                               int&nbsp;srcOffset)</pre>
<div class="block">Copies a vector of length 3</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>dst</code> - output vector</dd>
<dd><code>dstOffset</code> - offset of dst in array</dd>
<dd><code>src</code> - input vector</dd>
<dd><code>srcOffset</code> - offset of src in array</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>copied output vector for chaining</dd>
</dl>
</li>
</ul>
<a id="copyVec4(float[],int,float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>copyVec4</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;copyVec4&#8203;(float[]&nbsp;dst,
                               int&nbsp;dstOffset,
                               float[]&nbsp;src,
                               int&nbsp;srcOffset)</pre>
<div class="block">Copies a vector of length 4</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>dst</code> - output vector</dd>
<dd><code>dstOffset</code> - offset of dst in array</dd>
<dd><code>src</code> - input vector</dd>
<dd><code>srcOffset</code> - offset of src in array</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>copied output vector for chaining</dd>
</dl>
</li>
</ul>
<a id="isVec2Equal(float[],int,float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVec2Equal</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isVec2Equal&#8203;(float[]&nbsp;vec1,
                                  int&nbsp;vec1Offset,
                                  float[]&nbsp;vec2,
                                  int&nbsp;vec2Offset)</pre>
<div class="block">Return true if both vectors are equal w/o regarding an epsilon.
 <p>
 Implementation uses <a href="FloatUtil.html#isEqual(float,float)"><code>FloatUtil.isEqual(float, float)</code></a>, see API doc for details.
 </p></div>
</li>
</ul>
<a id="isVec3Equal(float[],int,float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVec3Equal</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isVec3Equal&#8203;(float[]&nbsp;vec1,
                                  int&nbsp;vec1Offset,
                                  float[]&nbsp;vec2,
                                  int&nbsp;vec2Offset)</pre>
<div class="block">Return true if both vectors are equal w/o regarding an epsilon.
 <p>
 Implementation uses <a href="FloatUtil.html#isEqual(float,float)"><code>FloatUtil.isEqual(float, float)</code></a>, see API doc for details.
 </p></div>
</li>
</ul>
<a id="isVec2Equal(float[],int,float[],int,float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVec2Equal</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isVec2Equal&#8203;(float[]&nbsp;vec1,
                                  int&nbsp;vec1Offset,
                                  float[]&nbsp;vec2,
                                  int&nbsp;vec2Offset,
                                  float&nbsp;epsilon)</pre>
<div class="block">Return true if both vectors are equal, i.e. their absolute delta < <code>epsilon</code>.
 <p>
 Implementation uses <a href="FloatUtil.html#isEqual(float,float,float)"><code>FloatUtil.isEqual(float, float, float)</code></a>, see API doc for details.
 </p></div>
</li>
</ul>
<a id="isVec3Equal(float[],int,float[],int,float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVec3Equal</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isVec3Equal&#8203;(float[]&nbsp;vec1,
                                  int&nbsp;vec1Offset,
                                  float[]&nbsp;vec2,
                                  int&nbsp;vec2Offset,
                                  float&nbsp;epsilon)</pre>
<div class="block">Return true if both vectors are equal, i.e. their absolute delta < <code>epsilon</code>.
 <p>
 Implementation uses <a href="FloatUtil.html#isEqual(float,float,float)"><code>FloatUtil.isEqual(float, float, float)</code></a>, see API doc for details.
 </p></div>
</li>
</ul>
<a id="isVec2Zero(float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVec2Zero</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isVec2Zero&#8203;(float[]&nbsp;vec,
                                 int&nbsp;vecOffset)</pre>
<div class="block">Return true if vector is zero, no <a href="FloatUtil.html#EPSILON"><code>FloatUtil.EPSILON</code></a> is taken into consideration.</div>
</li>
</ul>
<a id="isVec3Zero(float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVec3Zero</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isVec3Zero&#8203;(float[]&nbsp;vec,
                                 int&nbsp;vecOffset)</pre>
<div class="block">Return true if vector is zero, no <a href="FloatUtil.html#EPSILON"><code>FloatUtil.EPSILON</code></a> is taken into consideration.</div>
</li>
</ul>
<a id="isVec2Zero(float[],int,float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVec2Zero</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isVec2Zero&#8203;(float[]&nbsp;vec,
                                 int&nbsp;vecOffset,
                                 float&nbsp;epsilon)</pre>
<div class="block">Return true if vector is zero, i.e. it's absolute components < <code>epsilon</code>.
 <p>
 Implementation uses <a href="FloatUtil.html#isZero(float,float)"><code>FloatUtil.isZero(float, float)</code></a>, see API doc for details.
 </p></div>
</li>
</ul>
<a id="isVec3Zero(float[],int,float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVec3Zero</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isVec3Zero&#8203;(float[]&nbsp;vec,
                                 int&nbsp;vecOffset,
                                 float&nbsp;epsilon)</pre>
<div class="block">Return true if vector is zero, i.e. it's absolute components < <code>epsilon</code>.
 <p>
 Implementation uses <a href="FloatUtil.html#isZero(float,float)"><code>FloatUtil.isZero(float, float)</code></a>, see API doc for details.
 </p></div>
</li>
</ul>
<a id="isZero(float,float,float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isZero</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isZero&#8203;(float&nbsp;x,
                             float&nbsp;y,
                             float&nbsp;epsilon)</pre>
<div class="block">Return true if all two vector components are zero, i.e. it's their absolute value < <code>epsilon</code>.
 <p>
 Implementation uses <a href="FloatUtil.html#isZero(float,float)"><code>FloatUtil.isZero(float, float)</code></a>, see API doc for details.
 </p></div>
</li>
</ul>
<a id="isZero(float,float,float,float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isZero</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isZero&#8203;(float&nbsp;x,
                             float&nbsp;y,
                             float&nbsp;z,
                             float&nbsp;epsilon)</pre>
<div class="block">Return true if all three vector components are zero, i.e. it's their absolute value < <code>epsilon</code>.
 <p>
 Implementation uses <a href="FloatUtil.html#isZero(float,float)"><code>FloatUtil.isZero(float, float)</code></a>, see API doc for details.
 </p></div>
</li>
</ul>
<a id="distSquareVec3(float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>distSquareVec3</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;distSquareVec3&#8203;(float[]&nbsp;v1,
                                   float[]&nbsp;v2)</pre>
<div class="block">Return the squared distance between the given two points described vector v1 and v2.
 <p>
 When comparing the relative distance between two points it is usually sufficient to compare the squared
 distances, thus avoiding an expensive square root operation.
 </p></div>
</li>
</ul>
<a id="distVec3(float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>distVec3</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;distVec3&#8203;(float[]&nbsp;v1,
                             float[]&nbsp;v2)</pre>
<div class="block">Return the distance between the given two points described vector v1 and v2.</div>
</li>
</ul>
<a id="dotVec3(float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dotVec3</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;dotVec3&#8203;(float[]&nbsp;vec1,
                            float[]&nbsp;vec2)</pre>
<div class="block">Return the dot product of two points</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>vec1</code> - vector 1</dd>
<dd><code>vec2</code> - vector 2</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the dot product as float</dd>
</dl>
</li>
</ul>
<a id="cosAngleVec3(float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cosAngleVec3</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;cosAngleVec3&#8203;(float[]&nbsp;vec1,
                                 float[]&nbsp;vec2)</pre>
<div class="block">Return the cosines of the angle between to vectors</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>vec1</code> - vector 1</dd>
<dd><code>vec2</code> - vector 2</dd>
</dl>
</li>
</ul>
<a id="angleVec3(float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>angleVec3</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;angleVec3&#8203;(float[]&nbsp;vec1,
                              float[]&nbsp;vec2)</pre>
<div class="block">Return the angle between to vectors in radians</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>vec1</code> - vector 1</dd>
<dd><code>vec2</code> - vector 2</dd>
</dl>
</li>
</ul>
<a id="normSquareVec2(float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normSquareVec2</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;normSquareVec2&#8203;(float[]&nbsp;vec)</pre>
<div class="block">Return the squared length of a vector, a.k.a the squared <i>norm</i> or squared <i>magnitude</i></div>
</li>
</ul>
<a id="normSquareVec2(float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normSquareVec2</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;normSquareVec2&#8203;(float[]&nbsp;vec,
                                   int&nbsp;offset)</pre>
<div class="block">Return the squared length of a vector, a.k.a the squared <i>norm</i> or squared <i>magnitude</i></div>
</li>
</ul>
<a id="normSquareVec3(float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normSquareVec3</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;normSquareVec3&#8203;(float[]&nbsp;vec)</pre>
<div class="block">Return the squared length of a vector, a.k.a the squared <i>norm</i> or squared <i>magnitude</i></div>
</li>
</ul>
<a id="normSquareVec3(float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normSquareVec3</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;normSquareVec3&#8203;(float[]&nbsp;vec,
                                   int&nbsp;offset)</pre>
<div class="block">Return the squared length of a vector, a.k.a the squared <i>norm</i> or squared <i>magnitude</i></div>
</li>
</ul>
<a id="normVec2(float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normVec2</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;normVec2&#8203;(float[]&nbsp;vec)</pre>
<div class="block">Return the length of a vector, a.k.a the <i>norm</i> or <i>magnitude</i></div>
</li>
</ul>
<a id="normVec3(float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normVec3</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;normVec3&#8203;(float[]&nbsp;vec)</pre>
<div class="block">Return the length of a vector, a.k.a the <i>norm</i> or <i>magnitude</i></div>
</li>
</ul>
<a id="normalizeVec2(float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normalizeVec2</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;normalizeVec2&#8203;(float[]&nbsp;result,
                                    float[]&nbsp;vector)</pre>
<div class="block">Normalize a vector</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - output vector, may be vector (in-place)</dd>
<dd><code>vector</code> - input vector</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>normalized output vector</dd>
</dl>
</li>
</ul>
<a id="normalizeVec2(float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normalizeVec2</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;normalizeVec2&#8203;(float[]&nbsp;vector)</pre>
<div class="block">Normalize a vector in place</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>vector</code> - input vector</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>normalized output vector</dd>
</dl>
</li>
</ul>
<a id="normalizeVec3(float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normalizeVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;normalizeVec3&#8203;(float[]&nbsp;result,
                                    float[]&nbsp;vector)</pre>
<div class="block">Normalize a vector</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - output vector, may be vector (in-place)</dd>
<dd><code>vector</code> - input vector</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>normalized output vector</dd>
</dl>
</li>
</ul>
<a id="normalizeVec3(float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normalizeVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;normalizeVec3&#8203;(float[]&nbsp;vector)</pre>
<div class="block">Normalize a vector in place</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>vector</code> - input vector</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>normalized output vector</dd>
</dl>
</li>
</ul>
<a id="normalizeVec3(float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normalizeVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;normalizeVec3&#8203;(float[]&nbsp;vector,
                                    int&nbsp;offset)</pre>
<div class="block">Normalize a vector in place</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>vector</code> - input vector</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>normalized output vector</dd>
</dl>
</li>
</ul>
<a id="scaleVec2(float[],float[],float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>scaleVec2</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;scaleVec2&#8203;(float[]&nbsp;result,
                                float[]&nbsp;vector,
                                float&nbsp;scale)</pre>
<div class="block">Scales a vector by param using given result float[], result = vector * scale</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vector for the result, may be vector (in-place)</dd>
<dd><code>vector</code> - input vector</dd>
<dd><code>scale</code> - single scale constant for all vector components</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="scaleVec3(float[],float[],float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>scaleVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;scaleVec3&#8203;(float[]&nbsp;result,
                                float[]&nbsp;vector,
                                float&nbsp;scale)</pre>
<div class="block">Scales a vector by param using given result float[], result = vector * scale</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vector for the result, may be vector (in-place)</dd>
<dd><code>vector</code> - input vector</dd>
<dd><code>scale</code> - single scale constant for all vector components</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="scaleVec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>scaleVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;scaleVec3&#8203;(float[]&nbsp;result,
                                float[]&nbsp;vector,
                                float[]&nbsp;scale)</pre>
<div class="block">Scales a vector by param using given result float[], result = vector * scale</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vector for the result, may be vector (in-place)</dd>
<dd><code>vector</code> - input vector</dd>
<dd><code>scale</code> - 3 component scale constant for each vector component</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="scaleVec2(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>scaleVec2</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;scaleVec2&#8203;(float[]&nbsp;result,
                                float[]&nbsp;vector,
                                float[]&nbsp;scale)</pre>
<div class="block">Scales a vector by param using given result float[], result = vector * scale</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vector for the result, may be vector (in-place)</dd>
<dd><code>vector</code> - input vector</dd>
<dd><code>scale</code> - 2 component scale constant for each vector component</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="divVec2(float[],float[],float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>divVec2</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;divVec2&#8203;(float[]&nbsp;result,
                              float[]&nbsp;vector,
                              float&nbsp;scale)</pre>
<div class="block">Divides a vector by param using given result float[], result = vector / scale</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vector for the result, may be vector (in-place)</dd>
<dd><code>vector</code> - input vector</dd>
<dd><code>scale</code> - single scale constant for all vector components</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="divVec3(float[],float[],float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>divVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;divVec3&#8203;(float[]&nbsp;result,
                              float[]&nbsp;vector,
                              float&nbsp;scale)</pre>
<div class="block">Divides a vector by param using given result float[], result = vector / scale</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vector for the result, may be vector (in-place)</dd>
<dd><code>vector</code> - input vector</dd>
<dd><code>scale</code> - single scale constant for all vector components</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="divVec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>divVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;divVec3&#8203;(float[]&nbsp;result,
                              float[]&nbsp;vector,
                              float[]&nbsp;scale)</pre>
<div class="block">Divides a vector by param using given result float[], result = vector / scale</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vector for the result, may be vector (in-place)</dd>
<dd><code>vector</code> - input vector</dd>
<dd><code>scale</code> - 3 component scale constant for each vector component</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="divVec2(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>divVec2</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;divVec2&#8203;(float[]&nbsp;result,
                              float[]&nbsp;vector,
                              float[]&nbsp;scale)</pre>
<div class="block">Divides a vector by param using given result float[], result = vector / scale</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vector for the result, may be vector (in-place)</dd>
<dd><code>vector</code> - input vector</dd>
<dd><code>scale</code> - 2 component scale constant for each vector component</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="addVec2(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addVec2</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;addVec2&#8203;(float[]&nbsp;result,
                              float[]&nbsp;v1,
                              float[]&nbsp;v2)</pre>
<div class="block">Adds two vectors, result = v1 + v2</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - float[2] result vector, may be either v1 or v2 (in-place)</dd>
<dd><code>v1</code> - vector 1</dd>
<dd><code>v2</code> - vector 2</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="addVec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;addVec3&#8203;(float[]&nbsp;result,
                              float[]&nbsp;v1,
                              float[]&nbsp;v2)</pre>
<div class="block">Adds two vectors, result = v1 + v2</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - float[3] result vector, may be either v1 or v2 (in-place)</dd>
<dd><code>v1</code> - vector 1</dd>
<dd><code>v2</code> - vector 2</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="subVec2(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>subVec2</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;subVec2&#8203;(float[]&nbsp;result,
                              float[]&nbsp;v1,
                              float[]&nbsp;v2)</pre>
<div class="block">Subtracts two vectors, result = v1 - v2</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - float[2] result vector, may be either v1 or v2 (in-place)</dd>
<dd><code>v1</code> - vector 1</dd>
<dd><code>v2</code> - vector 2</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="subVec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>subVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;subVec3&#8203;(float[]&nbsp;result,
                              float[]&nbsp;v1,
                              float[]&nbsp;v2)</pre>
<div class="block">Subtracts two vectors, result = v1 - v2</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - float[3] result vector, may be either v1 or v2 (in-place)</dd>
<dd><code>v1</code> - vector 1</dd>
<dd><code>v2</code> - vector 2</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result vector for chaining</dd>
</dl>
</li>
</ul>
<a id="crossVec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>crossVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;crossVec3&#8203;(float[]&nbsp;result,
                                float[]&nbsp;v1,
                                float[]&nbsp;v2)</pre>
<div class="block">cross product vec1 x vec2</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v1</code> - vector 1</dd>
<dd><code>v2</code> - vector 2</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the resulting vector</dd>
</dl>
</li>
</ul>
<a id="crossVec3(float[],int,float[],int,float[],int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>crossVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;crossVec3&#8203;(float[]&nbsp;r,
                                int&nbsp;r_offset,
                                float[]&nbsp;v1,
                                int&nbsp;v1_offset,
                                float[]&nbsp;v2,
                                int&nbsp;v2_offset)</pre>
<div class="block">cross product vec1 x vec2</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v1</code> - vector 1</dd>
<dd><code>v2</code> - vector 2</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the resulting vector</dd>
</dl>
</li>
</ul>
<a id="mulColMat4Vec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mulColMat4Vec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;mulColMat4Vec3&#8203;(float[]&nbsp;result,
                                     float[]&nbsp;colMatrix,
                                     float[]&nbsp;vec)</pre>
<div class="block">Multiplication of column-major 4x4 matrix with vector</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>colMatrix</code> - column matrix (4x4)</dd>
<dd><code>vec</code> - vector(x,y,z)</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result</dd>
</dl>
</li>
</ul>
<a id="mulRowMat4Vec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mulRowMat4Vec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;mulRowMat4Vec3&#8203;(float[]&nbsp;result,
                                     float[]&nbsp;rawMatrix,
                                     float[]&nbsp;vec)</pre>
<div class="block">Matrix Vector multiplication</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>rawMatrix</code> - column matrix (4x4)</dd>
<dd><code>vec</code> - vector(x,y,z)</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result</dd>
</dl>
</li>
</ul>
<a id="mid(float,float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mid</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;mid&#8203;(float&nbsp;p1,
                        float&nbsp;p2)</pre>
<div class="block">Calculate the midpoint of two values</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>p1</code> - first value</dd>
<dd><code>p2</code> - second vale</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>midpoint</dd>
</dl>
</li>
</ul>
<a id="midVec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>midVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;midVec3&#8203;(float[]&nbsp;result,
                              float[]&nbsp;p1,
                              float[]&nbsp;p2)</pre>
<div class="block">Calculate the midpoint of two points</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>p1</code> - first point vector</dd>
<dd><code>p2</code> - second point vector</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>midpoint</dd>
</dl>
</li>
</ul>
<a id="determinantVec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>determinantVec3</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;determinantVec3&#8203;(float[]&nbsp;a,
                                    float[]&nbsp;b,
                                    float[]&nbsp;c)</pre>
<div class="block">Return the determinant of 3 vectors</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - vector 1</dd>
<dd><code>b</code> - vector 2</dd>
<dd><code>c</code> - vector 3</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the determinant value</dd>
</dl>
</li>
</ul>
<a id="isCollinearVec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isCollinearVec3</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isCollinearVec3&#8203;(float[]&nbsp;v1,
                                      float[]&nbsp;v2,
                                      float[]&nbsp;v3)</pre>
<div class="block">Check if three vertices are colliniear</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v1</code> - vertex 1</dd>
<dd><code>v2</code> - vertex 2</dd>
<dd><code>v3</code> - vertex 3</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if collinear, false otherwise</dd>
</dl>
</li>
</ul>
<a id="isInCircleVec2(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isInCircleVec2</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isInCircleVec2&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                                     <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                                     <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                                     <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d)</pre>
<div class="block">Check if vertices in triangle circumcircle</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - triangle vertex 1</dd>
<dd><code>b</code> - triangle vertex 2</dd>
<dd><code>c</code> - triangle vertex 3</dd>
<dd><code>d</code> - vertex in question</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the vertex d is inside the circle defined by the
 vertices a, b, c. from paper by Guibas and Stolfi (1985).</dd>
</dl>
</li>
</ul>
<a id="triAreaVec2(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>triAreaVec2</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;triAreaVec2&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                                <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                                <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c)</pre>
<div class="block">Computes oriented area of a triangle</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - first vertex</dd>
<dd><code>b</code> - second vertex</dd>
<dd><code>c</code> - third vertex</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>compute twice the area of the oriented triangle (a,b,c), the area
 is positive if the triangle is oriented counterclockwise.</dd>
</dl>
</li>
</ul>
<a id="triAreaVec2(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>triAreaVec2</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;triAreaVec2&#8203;(float[]&nbsp;A,
                                float[]&nbsp;B,
                                float[]&nbsp;C)</pre>
<div class="block">Computes oriented area of a triangle</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - first vertex</dd>
<dd><code>B</code> - second vertex</dd>
<dd><code>C</code> - third vertex</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>compute twice the area of the oriented triangle (a,b,c), the area
 is positive if the triangle is oriented counterclockwise.</dd>
</dl>
</li>
</ul>
<a id="isInTriangleVec3(float[],float[],float[],float[],float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isInTriangleVec3</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isInTriangleVec3&#8203;(float[]&nbsp;a,
                                       float[]&nbsp;b,
                                       float[]&nbsp;c,
                                       float[]&nbsp;p,
                                       float[]&nbsp;ac,
                                       float[]&nbsp;ab,
                                       float[]&nbsp;ap)</pre>
<div class="block">Check if a vertex is in triangle using
 barycentric coordinates computation.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - first triangle vertex</dd>
<dd><code>b</code> - second triangle vertex</dd>
<dd><code>c</code> - third triangle vertex</dd>
<dd><code>p</code> - the vertex in question</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if p is in triangle (a, b, c), false otherwise.</dd>
</dl>
</li>
</ul>
<a id="isVec3InTriangle3(float[],float[],float[],float[],float[],float[],float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVec3InTriangle3</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isVec3InTriangle3&#8203;(float[]&nbsp;a,
                                        float[]&nbsp;b,
                                        float[]&nbsp;c,
                                        float[]&nbsp;p1,
                                        float[]&nbsp;p2,
                                        float[]&nbsp;p3,
                                        float[]&nbsp;tmpAC,
                                        float[]&nbsp;tmpAB,
                                        float[]&nbsp;tmpAP)</pre>
<div class="block">Check if one of three vertices are in triangle using
 barycentric coordinates computation.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - first triangle vertex</dd>
<dd><code>b</code> - second triangle vertex</dd>
<dd><code>c</code> - third triangle vertex</dd>
<dd><code>p1</code> - the vertex in question</dd>
<dd><code>p2</code> - the vertex in question</dd>
<dd><code>p3</code> - the vertex in question</dd>
<dd><code>tmpAC</code> - </dd>
<dd><code>tmpAB</code> - </dd>
<dd><code>tmpAP</code> - </dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if p1 or p2 or p3 is in triangle (a, b, c), false otherwise.</dd>
</dl>
</li>
</ul>
<a id="isVec3InTriangle3(float[],float[],float[],float[],float[],float[],float[],float[],float[],float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isVec3InTriangle3</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;isVec3InTriangle3&#8203;(float[]&nbsp;a,
                                        float[]&nbsp;b,
                                        float[]&nbsp;c,
                                        float[]&nbsp;p1,
                                        float[]&nbsp;p2,
                                        float[]&nbsp;p3,
                                        float[]&nbsp;tmpAC,
                                        float[]&nbsp;tmpAB,
                                        float[]&nbsp;tmpAP,
                                        float&nbsp;epsilon)</pre>
<div class="block">Check if one of three vertices are in triangle using
 barycentric coordinates computation, using given epsilon for comparison.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - first triangle vertex</dd>
<dd><code>b</code> - second triangle vertex</dd>
<dd><code>c</code> - third triangle vertex</dd>
<dd><code>p1</code> - the vertex in question</dd>
<dd><code>p2</code> - the vertex in question</dd>
<dd><code>p3</code> - the vertex in question</dd>
<dd><code>tmpAC</code> - </dd>
<dd><code>tmpAB</code> - </dd>
<dd><code>tmpAP</code> - </dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if p1 or p2 or p3 is in triangle (a, b, c), false otherwise.</dd>
</dl>
</li>
</ul>
<a id="ccw(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ccw</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;ccw&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                          <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                          <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c)</pre>
<div class="block">Check if points are in ccw order</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - first vertex</dd>
<dd><code>b</code> - second vertex</dd>
<dd><code>c</code> - third vertex</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the points a,b,c are in a ccw order</dd>
</dl>
</li>
</ul>
<a id="getWinding(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getWinding</h4>
<pre class="methodSignature">public static&nbsp;<a href="VectorUtil.Winding.html" title="enum in com.jogamp.opengl.math">VectorUtil.Winding</a>&nbsp;getWinding&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                                            <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                                            <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c)</pre>
<div class="block">Compute the winding of given points</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - first vertex</dd>
<dd><code>b</code> - second vertex</dd>
<dd><code>c</code> - third vertex</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Winding</dd>
</dl>
</li>
</ul>
<a id="area(java.util.ArrayList)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>area</h4>
<pre class="methodSignature">public static&nbsp;float&nbsp;area&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true" title="class or interface in java.util" class="externalLink">ArrayList</a>&lt;? extends <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&gt;&nbsp;vertices)</pre>
<div class="block">Computes the area of a list of vertices to check if ccw</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>vertices</code> - </dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>positive area if ccw else negative area value</dd>
</dl>
</li>
</ul>
<a id="getWinding(java.util.ArrayList)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getWinding</h4>
<pre class="methodSignature">public static&nbsp;<a href="VectorUtil.Winding.html" title="enum in com.jogamp.opengl.math">VectorUtil.Winding</a>&nbsp;getWinding&#8203;(<a href="http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true" title="class or interface in java.util" class="externalLink">ArrayList</a>&lt;? extends <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&gt;&nbsp;vertices)</pre>
<div class="block">Compute the  general winding of the vertices</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>vertices</code> - array of Vertices</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>CCW or CW <a href="VectorUtil.Winding.html" title="enum in com.jogamp.opengl.math"><code>VectorUtil.Winding</code></a></dd>
</dl>
</li>
</ul>
<a id="getNormalVec2(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getNormalVec2</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;getNormalVec2&#8203;(float[]&nbsp;result,
                                    float[]&nbsp;v1,
                                    float[]&nbsp;v2)</pre>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vec2 result for normal</dd>
<dd><code>v1</code> - vec2</dd>
<dd><code>v2</code> - vec2</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result for chaining</dd>
</dl>
</li>
</ul>
<a id="getNormalVec3(float[],float[],float[],float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getNormalVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;getNormalVec3&#8203;(float[]&nbsp;result,
                                    float[]&nbsp;v1,
                                    float[]&nbsp;v2,
                                    float[]&nbsp;v3,
                                    float[]&nbsp;tmp1Vec3,
                                    float[]&nbsp;tmp2Vec3)</pre>
<div class="block">Returns the 3d surface normal of a triangle given three vertices.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vec3 result for normal</dd>
<dd><code>v1</code> - vec3</dd>
<dd><code>v2</code> - vec3</dd>
<dd><code>v3</code> - vec3</dd>
<dd><code>tmp1Vec3</code> - temp vec3</dd>
<dd><code>tmp2Vec3</code> - temp vec3</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result for chaining</dd>
</dl>
</li>
</ul>
<a id="getPlaneVec3(float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPlaneVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;getPlaneVec3&#8203;(float[]&nbsp;resultV4,
                                   float[]&nbsp;normalVec3,
                                   float[]&nbsp;pVec3)</pre>
<div class="block">Finds the plane equation of a plane given its normal and a point on the plane.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>resultV4</code> - vec4 plane equation</dd>
<dd><code>normalVec3</code> - </dd>
<dd><code>pVec3</code> - </dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result for chaining</dd>
</dl>
</li>
</ul>
<a id="getPlaneVec3(float[],float[],float[],float[],float[],float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPlaneVec3</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;getPlaneVec3&#8203;(float[]&nbsp;resultVec4,
                                   float[]&nbsp;v1,
                                   float[]&nbsp;v2,
                                   float[]&nbsp;v3,
                                   float[]&nbsp;temp1V3,
                                   float[]&nbsp;temp2V3)</pre>
<div class="block">This finds the plane equation of a triangle given three vertices.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>resultVec4</code> - vec4 plane equation</dd>
<dd><code>v1</code> - vec3</dd>
<dd><code>v2</code> - vec3</dd>
<dd><code>v3</code> - vec3</dd>
<dd><code>temp1V3</code> - </dd>
<dd><code>temp2V3</code> - </dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>result for chaining</dd>
</dl>
</li>
</ul>
<a id="line2PlaneIntersection(float[],com.jogamp.opengl.math.Ray,float[],float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>line2PlaneIntersection</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;line2PlaneIntersection&#8203;(float[]&nbsp;result,
                                             <a href="Ray.html" title="class in com.jogamp.opengl.math">Ray</a>&nbsp;ray,
                                             float[]&nbsp;plane,
                                             float&nbsp;epsilon)</pre>
<div class="block">Return intersection of an infinite line with a plane if exists, otherwise null.
 <p>
 Thanks to <i>Norman Vine -- nhv@yahoo.com  (with hacks by Steve)</i>
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>result</code> - vec3 result buffer for intersecting coords</dd>
<dd><code>ray</code> - here representing an infinite line, origin and direction.</dd>
<dd><code>plane</code> - vec4 plane equation</dd>
<dd><code>epsilon</code> - </dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>resulting intersecting if exists, otherwise null</dd>
</dl>
</li>
</ul>
<a id="seg2SegIntersection(float[],com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>seg2SegIntersection</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;seg2SegIntersection&#8203;(float[]&nbsp;result,
                                          <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                                          <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                                          <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                                          <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d)</pre>
<div class="block">Compute intersection between two segments</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - vertex 1 of first segment</dd>
<dd><code>b</code> - vertex 2 of first segment</dd>
<dd><code>c</code> - vertex 1 of second segment</dd>
<dd><code>d</code> - vertex 2 of second segment</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the intersection coordinates if the segments intersect, otherwise returns null</dd>
</dl>
</li>
</ul>
<a id="testSeg2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSeg2SegIntersection</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;testSeg2SegIntersection&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d)</pre>
<div class="block">Compute intersection between two segments</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - vertex 1 of first segment</dd>
<dd><code>b</code> - vertex 2 of first segment</dd>
<dd><code>c</code> - vertex 1 of second segment</dd>
<dd><code>d</code> - vertex 2 of second segment</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the segments intersect, otherwise returns false</dd>
</dl>
</li>
</ul>
<a id="testSeg2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSeg2SegIntersection</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;testSeg2SegIntersection&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d,
                                              float&nbsp;epsilon)</pre>
<div class="block">Compute intersection between two segments, using given epsilon for comparison.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - vertex 1 of first segment</dd>
<dd><code>b</code> - vertex 2 of first segment</dd>
<dd><code>c</code> - vertex 1 of second segment</dd>
<dd><code>d</code> - vertex 2 of second segment</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the segments intersect, otherwise returns false</dd>
</dl>
</li>
</ul>
<a id="line2lineIntersection(float[],com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>line2lineIntersection</h4>
<pre class="methodSignature">public static&nbsp;float[]&nbsp;line2lineIntersection&#8203;(float[]&nbsp;result,
                                            <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                                            <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                                            <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                                            <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d)</pre>
<div class="block">Compute intersection between two lines</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - vertex 1 of first line</dd>
<dd><code>b</code> - vertex 2 of first line</dd>
<dd><code>c</code> - vertex 1 of second line</dd>
<dd><code>d</code> - vertex 2 of second line</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the intersection coordinates if the lines intersect, otherwise
 returns null</dd>
</dl>
</li>
</ul>
<a id="testTri2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testTri2SegIntersection</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;testTri2SegIntersection&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;e)</pre>
<div class="block">Check if a segment intersects with a triangle</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - vertex 1 of the triangle</dd>
<dd><code>b</code> - vertex 2 of the triangle</dd>
<dd><code>c</code> - vertex 3 of the triangle</dd>
<dd><code>d</code> - vertex 1 of first segment</dd>
<dd><code>e</code> - vertex 2 of first segment</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the segment intersects at least one segment of the triangle, false otherwise</dd>
</dl>
</li>
</ul>
<a id="testTri2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,float)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>testTri2SegIntersection</h4>
<pre class="methodSignature">public static&nbsp;boolean&nbsp;testTri2SegIntersection&#8203;(<a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;a,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;b,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;c,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;d,
                                              <a href="Vert2fImmutable.html" title="interface in com.jogamp.opengl.math">Vert2fImmutable</a>&nbsp;e,
                                              float&nbsp;epsilon)</pre>
<div class="block">Check if a segment intersects with a triangle, using given epsilon for comparison.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - vertex 1 of the triangle</dd>
<dd><code>b</code> - vertex 2 of the triangle</dd>
<dd><code>c</code> - vertex 3 of the triangle</dd>
<dd><code>d</code> - vertex 1 of first segment</dd>
<dd><code>e</code> - vertex 2 of first segment</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the segment intersects at least one segment of the triangle, false otherwise</dd>
</dl>
</li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
</div>
</main>
<!-- ========= END OF CLASS DATA ========= -->
<footer role="contentinfo">
<nav role="navigation">
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a id="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-all.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../../index.html?com/jogamp/opengl/math/VectorUtil.html" target="_top">Frames</a></li>
<li><a href="VectorUtil.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</nav>
<p class="legalCopy"><small>Copyright 2010 JogAmp Community.</small></p>
</footer>
</body>
</html>
